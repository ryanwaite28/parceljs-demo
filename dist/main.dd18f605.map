{"version":3,"sources":["node_modules\\idb\\lib\\idb.js","node_modules\\prop-types\\lib\\ReactPropTypesSecret.js","node_modules\\prop-types\\factoryWithThrowingShims.js","node_modules\\prop-types\\index.js","node_modules\\knockout\\build\\output\\knockout-latest.debug.js","main.js"],"names":["REACT_ELEMENT_TYPE","isValidElement","throwOnDirectAccess","exports","require","console","log","idb","PropTypes","knockout","document","addEventListener","e","DB","mvc","lod_mvc","open","createObjectStore","keyPath","then","db","read","arr","MVC","applyBindings","CRUD","list","self","edit","app_name","observable","observableArray","new_value_input","editing","submit_new_value","value","obj","Object","assign","updated","Date","update","replace","cancel_editing","id","now","created","create","push","edit_value","val","delete_value","destroy","remove","data_obj","tx","transaction","objectStore","put","complete","key","get","getAll","delete"],"mappings":"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","file":"main.dd18f605.map","sourceRoot":"..","sourcesContent":["'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/*!\n * Knockout JavaScript library v3.4.2\n * (c) The Knockout.js team - http://knockoutjs.com/\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\n */\n\n(function(){\nvar DEBUG=true;\n(function(undefined){\n    // (0, eval)('this') is a robust way of getting a reference to the global object\n    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\n    var window = this || (0, eval)('this'),\n        document = window['document'],\n        navigator = window['navigator'],\n        jQueryInstance = window[\"jQuery\"],\n        JSON = window[\"JSON\"];\n(function(factory) {\n    // Support three module loading scenarios\n    if (typeof define === 'function' && define['amd']) {\n        // [1] AMD anonymous module\n        define(['exports', 'require'], factory);\n    } else if (typeof exports === 'object' && typeof module === 'object') {\n        // [2] CommonJS/Node.js\n        factory(module['exports'] || exports);  // module.exports is for Node.js\n    } else {\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\n        factory(window['ko'] = {});\n    }\n}(function(koExports, amdRequire){\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\nvar ko = typeof koExports !== 'undefined' ? koExports : {};\n// Google Closure Compiler helpers (used only to make the minified file smaller)\nko.exportSymbol = function(koPath, object) {\n    var tokens = koPath.split(\".\");\n\n    // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\n    // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\n    var target = ko;\n\n    for (var i = 0; i < tokens.length - 1; i++)\n        target = target[tokens[i]];\n    target[tokens[tokens.length - 1]] = object;\n};\nko.exportProperty = function(owner, publicName, object) {\n    owner[publicName] = object;\n};\nko.version = \"3.4.2\";\n\nko.exportSymbol('version', ko.version);\n// For any options that may affect various areas of Knockout and aren't directly associated with data binding.\nko.options = {\n    'deferUpdates': false,\n    'useOnlyNativeEvents': false\n};\n\n//ko.exportSymbol('options', ko.options);   // 'options' isn't minified\nko.utils = (function () {\n    function objectForEach(obj, action) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                action(prop, obj[prop]);\n            }\n        }\n    }\n\n    function extend(target, source) {\n        if (source) {\n            for(var prop in source) {\n                if(source.hasOwnProperty(prop)) {\n                    target[prop] = source[prop];\n                }\n            }\n        }\n        return target;\n    }\n\n    function setPrototypeOf(obj, proto) {\n        obj.__proto__ = proto;\n        return obj;\n    }\n\n    var canSetPrototype = ({ __proto__: [] } instanceof Array);\n    var canUseSymbols = !DEBUG && typeof Symbol === 'function';\n\n    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\n    var knownEvents = {}, knownEventTypesByEventName = {};\n    var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\n    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\n    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\n    objectForEach(knownEvents, function(eventType, knownEventsForType) {\n        if (knownEventsForType.length) {\n            for (var i = 0, j = knownEventsForType.length; i < j; i++)\n                knownEventTypesByEventName[knownEventsForType[i]] = eventType;\n        }\n    });\n    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\n\n    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\n    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\n    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\n    // If there is a future need to detect specific versions of IE10+, we will amend this.\n    var ieVersion = document && (function() {\n        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\n\n        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\n        while (\n            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\n            iElems[0]\n        ) {}\n        return version > 4 ? version : undefined;\n    }());\n    var isIe6 = ieVersion === 6,\n        isIe7 = ieVersion === 7;\n\n    function isClickOnCheckableElement(element, eventType) {\n        if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\n        if (eventType.toLowerCase() != \"click\") return false;\n        var inputType = element.type;\n        return (inputType == \"checkbox\") || (inputType == \"radio\");\n    }\n\n    // For details on the pattern for changing node classes\n    // see: https://github.com/knockout/knockout/issues/1597\n    var cssClassNameRegex = /\\S+/g;\n\n    function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\n        var addOrRemoveFn;\n        if (classNames) {\n            if (typeof node.classList === 'object') {\n                addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\n                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\n                    addOrRemoveFn.call(node.classList, className);\n                });\n            } else if (typeof node.className['baseVal'] === 'string') {\n                // SVG tag .classNames is an SVGAnimatedString instance\n                toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\n            } else {\n                // node.className ought to be a string.\n                toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\n            }\n        }\n    }\n\n    function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\n        // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\n        var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\n        ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\n            ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\n        });\n        obj[prop] = currentClassNames.join(\" \");\n    }\n\n    return {\n        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\n\n        arrayForEach: function (array, action) {\n            for (var i = 0, j = array.length; i < j; i++)\n                action(array[i], i);\n        },\n\n        arrayIndexOf: function (array, item) {\n            if (typeof Array.prototype.indexOf == \"function\")\n                return Array.prototype.indexOf.call(array, item);\n            for (var i = 0, j = array.length; i < j; i++)\n                if (array[i] === item)\n                    return i;\n            return -1;\n        },\n\n        arrayFirst: function (array, predicate, predicateOwner) {\n            for (var i = 0, j = array.length; i < j; i++)\n                if (predicate.call(predicateOwner, array[i], i))\n                    return array[i];\n            return null;\n        },\n\n        arrayRemoveItem: function (array, itemToRemove) {\n            var index = ko.utils.arrayIndexOf(array, itemToRemove);\n            if (index > 0) {\n                array.splice(index, 1);\n            }\n            else if (index === 0) {\n                array.shift();\n            }\n        },\n\n        arrayGetDistinctValues: function (array) {\n            array = array || [];\n            var result = [];\n            for (var i = 0, j = array.length; i < j; i++) {\n                if (ko.utils.arrayIndexOf(result, array[i]) < 0)\n                    result.push(array[i]);\n            }\n            return result;\n        },\n\n        arrayMap: function (array, mapping) {\n            array = array || [];\n            var result = [];\n            for (var i = 0, j = array.length; i < j; i++)\n                result.push(mapping(array[i], i));\n            return result;\n        },\n\n        arrayFilter: function (array, predicate) {\n            array = array || [];\n            var result = [];\n            for (var i = 0, j = array.length; i < j; i++)\n                if (predicate(array[i], i))\n                    result.push(array[i]);\n            return result;\n        },\n\n        arrayPushAll: function (array, valuesToPush) {\n            if (valuesToPush instanceof Array)\n                array.push.apply(array, valuesToPush);\n            else\n                for (var i = 0, j = valuesToPush.length; i < j; i++)\n                    array.push(valuesToPush[i]);\n            return array;\n        },\n\n        addOrRemoveItem: function(array, value, included) {\n            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\n            if (existingEntryIndex < 0) {\n                if (included)\n                    array.push(value);\n            } else {\n                if (!included)\n                    array.splice(existingEntryIndex, 1);\n            }\n        },\n\n        canSetPrototype: canSetPrototype,\n\n        extend: extend,\n\n        setPrototypeOf: setPrototypeOf,\n\n        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\n\n        objectForEach: objectForEach,\n\n        objectMap: function(source, mapping) {\n            if (!source)\n                return source;\n            var target = {};\n            for (var prop in source) {\n                if (source.hasOwnProperty(prop)) {\n                    target[prop] = mapping(source[prop], prop, source);\n                }\n            }\n            return target;\n        },\n\n        emptyDomNode: function (domNode) {\n            while (domNode.firstChild) {\n                ko.removeNode(domNode.firstChild);\n            }\n        },\n\n        moveCleanedNodesToContainerElement: function(nodes) {\n            // Ensure it's a real array, as we're about to reparent the nodes and\n            // we don't want the underlying collection to change while we're doing that.\n            var nodesArray = ko.utils.makeArray(nodes);\n            var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\n\n            var container = templateDocument.createElement('div');\n            for (var i = 0, j = nodesArray.length; i < j; i++) {\n                container.appendChild(ko.cleanNode(nodesArray[i]));\n            }\n            return container;\n        },\n\n        cloneNodes: function (nodesArray, shouldCleanNodes) {\n            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\n                var clonedNode = nodesArray[i].cloneNode(true);\n                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\n            }\n            return newNodesArray;\n        },\n\n        setDomNodeChildren: function (domNode, childNodes) {\n            ko.utils.emptyDomNode(domNode);\n            if (childNodes) {\n                for (var i = 0, j = childNodes.length; i < j; i++)\n                    domNode.appendChild(childNodes[i]);\n            }\n        },\n\n        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\n            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\n            if (nodesToReplaceArray.length > 0) {\n                var insertionPoint = nodesToReplaceArray[0];\n                var parent = insertionPoint.parentNode;\n                for (var i = 0, j = newNodesArray.length; i < j; i++)\n                    parent.insertBefore(newNodesArray[i], insertionPoint);\n                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\n                    ko.removeNode(nodesToReplaceArray[i]);\n                }\n            }\n        },\n\n        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\n            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\n            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\n            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\n            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\n            // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\n            //\n            // Rules:\n            //   [A] Any leading nodes that have been removed should be ignored\n            //       These most likely correspond to memoization nodes that were already removed during binding\n            //       See https://github.com/knockout/knockout/pull/440\n            //   [B] Any trailing nodes that have been remove should be ignored\n            //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]\n            //       See https://github.com/knockout/knockout/pull/1903\n            //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\n            //       and include any nodes that have been inserted among the previous collection\n\n            if (continuousNodeArray.length) {\n                // The parent node can be a virtual element; so get the real parent node\n                parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\n\n                // Rule [A]\n                while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\n                    continuousNodeArray.splice(0, 1);\n\n                // Rule [B]\n                while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)\n                    continuousNodeArray.length--;\n\n                // Rule [C]\n                if (continuousNodeArray.length > 1) {\n                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\n                    // Replace with the actual new continuous node set\n                    continuousNodeArray.length = 0;\n                    while (current !== last) {\n                        continuousNodeArray.push(current);\n                        current = current.nextSibling;\n                    }\n                    continuousNodeArray.push(last);\n                }\n            }\n            return continuousNodeArray;\n        },\n\n        setOptionNodeSelectionState: function (optionNode, isSelected) {\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\n            if (ieVersion < 7)\n                optionNode.setAttribute(\"selected\", isSelected);\n            else\n                optionNode.selected = isSelected;\n        },\n\n        stringTrim: function (string) {\n            return string === null || string === undefined ? '' :\n                string.trim ?\n                    string.trim() :\n                    string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\n        },\n\n        stringStartsWith: function (string, startsWith) {\n            string = string || \"\";\n            if (startsWith.length > string.length)\n                return false;\n            return string.substring(0, startsWith.length) === startsWith;\n        },\n\n        domNodeIsContainedBy: function (node, containedByNode) {\n            if (node === containedByNode)\n                return true;\n            if (node.nodeType === 11)\n                return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\n            if (containedByNode.contains)\n                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\n            if (containedByNode.compareDocumentPosition)\n                return (containedByNode.compareDocumentPosition(node) & 16) == 16;\n            while (node && node != containedByNode) {\n                node = node.parentNode;\n            }\n            return !!node;\n        },\n\n        domNodeIsAttachedToDocument: function (node) {\n            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\n        },\n\n        anyDomNodeIsAttachedToDocument: function(nodes) {\n            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\n        },\n\n        tagNameLower: function(element) {\n            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\n            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\n            // we don't need to do the .toLowerCase() as it will always be lower case anyway.\n            return element && element.tagName && element.tagName.toLowerCase();\n        },\n\n        catchFunctionErrors: function (delegate) {\n            return ko['onError'] ? function () {\n                try {\n                    return delegate.apply(this, arguments);\n                } catch (e) {\n                    ko['onError'] && ko['onError'](e);\n                    throw e;\n                }\n            } : delegate;\n        },\n\n        setTimeout: function (handler, timeout) {\n            return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);\n        },\n\n        deferError: function (error) {\n            setTimeout(function () {\n                ko['onError'] && ko['onError'](error);\n                throw error;\n            }, 0);\n        },\n\n        registerEventHandler: function (element, eventType, handler) {\n            var wrappedHandler = ko.utils.catchFunctionErrors(handler);\n\n            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];\n            if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {\n                jQueryInstance(element)['bind'](eventType, wrappedHandler);\n            } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\n                element.addEventListener(eventType, wrappedHandler, false);\n            else if (typeof element.attachEvent != \"undefined\") {\n                var attachEventHandler = function (event) { wrappedHandler.call(element, event); },\n                    attachEventName = \"on\" + eventType;\n                element.attachEvent(attachEventName, attachEventHandler);\n\n                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\n                // so to avoid leaks, we have to remove them manually. See bug #856\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\n                    element.detachEvent(attachEventName, attachEventHandler);\n                });\n            } else\n                throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\n        },\n\n        triggerEvent: function (element, eventType) {\n            if (!(element && element.nodeType))\n                throw new Error(\"element must be a DOM node when calling triggerEvent\");\n\n            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\n            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\n            // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\n            // In both cases, we'll use the click method instead.\n            var useClickWorkaround = isClickOnCheckableElement(element, eventType);\n\n            if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {\n                jQueryInstance(element)['trigger'](eventType);\n            } else if (typeof document.createEvent == \"function\") {\n                if (typeof element.dispatchEvent == \"function\") {\n                    var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\n                    var event = document.createEvent(eventCategory);\n                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\n                    element.dispatchEvent(event);\n                }\n                else\n                    throw new Error(\"The supplied element doesn't support dispatchEvent\");\n            } else if (useClickWorkaround && element.click) {\n                element.click();\n            } else if (typeof element.fireEvent != \"undefined\") {\n                element.fireEvent(\"on\" + eventType);\n            } else {\n                throw new Error(\"Browser doesn't support triggering events\");\n            }\n        },\n\n        unwrapObservable: function (value) {\n            return ko.isObservable(value) ? value() : value;\n        },\n\n        peekObservable: function (value) {\n            return ko.isObservable(value) ? value.peek() : value;\n        },\n\n        toggleDomNodeCssClass: toggleDomNodeCssClass,\n\n        setTextContent: function(element, textContent) {\n            var value = ko.utils.unwrapObservable(textContent);\n            if ((value === null) || (value === undefined))\n                value = \"\";\n\n            // We need there to be exactly one child: a text node.\n            // If there are no children, more than one, or if it's not a text node,\n            // we'll clear everything and create a single text node.\n            var innerTextNode = ko.virtualElements.firstChild(element);\n            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\n                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\n            } else {\n                innerTextNode.data = value;\n            }\n\n            ko.utils.forceRefresh(element);\n        },\n\n        setElementName: function(element, name) {\n            element.name = name;\n\n            // Workaround IE 6/7 issue\n            // - https://github.com/SteveSanderson/knockout/issues/197\n            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/\n            if (ieVersion <= 7) {\n                try {\n                    element.mergeAttributes(document.createElement(\"<input name='\" + element.name + \"'/>\"), false);\n                }\n                catch(e) {} // For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"\n            }\n        },\n\n        forceRefresh: function(node) {\n            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\n            if (ieVersion >= 9) {\n                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\n                var elem = node.nodeType == 1 ? node : node.parentNode;\n                if (elem.style)\n                    elem.style.zoom = elem.style.zoom;\n            }\n        },\n\n        ensureSelectElementIsRenderedCorrectly: function(selectElement) {\n            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\n            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\n            if (ieVersion) {\n                var originalWidth = selectElement.style.width;\n                selectElement.style.width = 0;\n                selectElement.style.width = originalWidth;\n            }\n        },\n\n        range: function (min, max) {\n            min = ko.utils.unwrapObservable(min);\n            max = ko.utils.unwrapObservable(max);\n            var result = [];\n            for (var i = min; i <= max; i++)\n                result.push(i);\n            return result;\n        },\n\n        makeArray: function(arrayLikeObject) {\n            var result = [];\n            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\n                result.push(arrayLikeObject[i]);\n            };\n            return result;\n        },\n\n        createSymbolOrString: function(identifier) {\n            return canUseSymbols ? Symbol(identifier) : identifier;\n        },\n\n        isIe6 : isIe6,\n        isIe7 : isIe7,\n        ieVersion : ieVersion,\n\n        getFormFields: function(form, fieldName) {\n            var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\n            var isMatchingField = (typeof fieldName == 'string')\n                ? function(field) { return field.name === fieldName }\n                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\n            var matches = [];\n            for (var i = fields.length - 1; i >= 0; i--) {\n                if (isMatchingField(fields[i]))\n                    matches.push(fields[i]);\n            };\n            return matches;\n        },\n\n        parseJson: function (jsonString) {\n            if (typeof jsonString == \"string\") {\n                jsonString = ko.utils.stringTrim(jsonString);\n                if (jsonString) {\n                    if (JSON && JSON.parse) // Use native parsing where available\n                        return JSON.parse(jsonString);\n                    return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\n                }\n            }\n            return null;\n        },\n\n        stringifyJson: function (data, replacer, space) {   // replacer and space are optional\n            if (!JSON || !JSON.stringify)\n                throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\n            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\n        },\n\n        postJson: function (urlOrForm, data, options) {\n            options = options || {};\n            var params = options['params'] || {};\n            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\n            var url = urlOrForm;\n\n            // If we were given a form, use its 'action' URL and pick out any requested field values\n            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\n                var originalForm = urlOrForm;\n                url = originalForm.action;\n                for (var i = includeFields.length - 1; i >= 0; i--) {\n                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\n                    for (var j = fields.length - 1; j >= 0; j--)\n                        params[fields[j].name] = fields[j].value;\n                }\n            }\n\n            data = ko.utils.unwrapObservable(data);\n            var form = document.createElement(\"form\");\n            form.style.display = \"none\";\n            form.action = url;\n            form.method = \"post\";\n            for (var key in data) {\n                // Since 'data' this is a model object, we include all properties including those inherited from its prototype\n                var input = document.createElement(\"input\");\n                input.type = \"hidden\";\n                input.name = key;\n                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\n                form.appendChild(input);\n            }\n            objectForEach(params, function(key, value) {\n                var input = document.createElement(\"input\");\n                input.type = \"hidden\";\n                input.name = key;\n                input.value = value;\n                form.appendChild(input);\n            });\n            document.body.appendChild(form);\n            options['submitter'] ? options['submitter'](form) : form.submit();\n            setTimeout(function () { form.parentNode.removeChild(form); }, 0);\n        }\n    }\n}());\n\nko.exportSymbol('utils', ko.utils);\nko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\nko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\nko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\nko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\nko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\nko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\nko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\nko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\nko.exportSymbol('utils.extend', ko.utils.extend);\nko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\nko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\nko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\nko.exportSymbol('utils.postJson', ko.utils.postJson);\nko.exportSymbol('utils.parseJson', ko.utils.parseJson);\nko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\nko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\nko.exportSymbol('utils.range', ko.utils.range);\nko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\nko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\nko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\nko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\nko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\nko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\nko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\n\nif (!Function.prototype['bind']) {\n    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\n    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\n    Function.prototype['bind'] = function (object) {\n        var originalFunction = this;\n        if (arguments.length === 1) {\n            return function () {\n                return originalFunction.apply(object, arguments);\n            };\n        } else {\n            var partialArgs = Array.prototype.slice.call(arguments, 1);\n            return function () {\n                var args = partialArgs.slice(0);\n                args.push.apply(args, arguments);\n                return originalFunction.apply(object, args);\n            };\n        }\n    };\n}\n\nko.utils.domData = new (function () {\n    var uniqueId = 0;\n    var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\n    var dataStore = {};\n\n    function getAll(node, createIfNotFound) {\n        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\n        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\n        if (!hasExistingDataStore) {\n            if (!createIfNotFound)\n                return undefined;\n            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\n            dataStore[dataStoreKey] = {};\n        }\n        return dataStore[dataStoreKey];\n    }\n\n    return {\n        get: function (node, key) {\n            var allDataForNode = getAll(node, false);\n            return allDataForNode === undefined ? undefined : allDataForNode[key];\n        },\n        set: function (node, key, value) {\n            if (value === undefined) {\n                // Make sure we don't actually create a new domData key if we are actually deleting a value\n                if (getAll(node, false) === undefined)\n                    return;\n            }\n            var allDataForNode = getAll(node, true);\n            allDataForNode[key] = value;\n        },\n        clear: function (node) {\n            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\n            if (dataStoreKey) {\n                delete dataStore[dataStoreKey];\n                node[dataStoreKeyExpandoPropertyName] = null;\n                return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\n            }\n            return false;\n        },\n\n        nextKey: function () {\n            return (uniqueId++) + dataStoreKeyExpandoPropertyName;\n        }\n    };\n})();\n\nko.exportSymbol('utils.domData', ko.utils.domData);\nko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\n\nko.utils.domNodeDisposal = new (function () {\n    var domDataKey = ko.utils.domData.nextKey();\n    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\n    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\n\n    function getDisposeCallbacksCollection(node, createIfNotFound) {\n        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\n        if ((allDisposeCallbacks === undefined) && createIfNotFound) {\n            allDisposeCallbacks = [];\n            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\n        }\n        return allDisposeCallbacks;\n    }\n    function destroyCallbacksCollection(node) {\n        ko.utils.domData.set(node, domDataKey, undefined);\n    }\n\n    function cleanSingleNode(node) {\n        // Run all the dispose callbacks\n        var callbacks = getDisposeCallbacksCollection(node, false);\n        if (callbacks) {\n            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\n            for (var i = 0; i < callbacks.length; i++)\n                callbacks[i](node);\n        }\n\n        // Erase the DOM data\n        ko.utils.domData.clear(node);\n\n        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\n        ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\n\n        // Clear any immediate-child comment nodes, as these wouldn't have been found by\n        // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\n        if (cleanableNodeTypesWithDescendants[node.nodeType])\n            cleanImmediateCommentTypeChildren(node);\n    }\n\n    function cleanImmediateCommentTypeChildren(nodeWithChildren) {\n        var child, nextChild = nodeWithChildren.firstChild;\n        while (child = nextChild) {\n            nextChild = child.nextSibling;\n            if (child.nodeType === 8)\n                cleanSingleNode(child);\n        }\n    }\n\n    return {\n        addDisposeCallback : function(node, callback) {\n            if (typeof callback != \"function\")\n                throw new Error(\"Callback must be a function\");\n            getDisposeCallbacksCollection(node, true).push(callback);\n        },\n\n        removeDisposeCallback : function(node, callback) {\n            var callbacksCollection = getDisposeCallbacksCollection(node, false);\n            if (callbacksCollection) {\n                ko.utils.arrayRemoveItem(callbacksCollection, callback);\n                if (callbacksCollection.length == 0)\n                    destroyCallbacksCollection(node);\n            }\n        },\n\n        cleanNode : function(node) {\n            // First clean this node, where applicable\n            if (cleanableNodeTypes[node.nodeType]) {\n                cleanSingleNode(node);\n\n                // ... then its descendants, where applicable\n                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\n                    // Clone the descendants list in case it changes during iteration\n                    var descendants = [];\n                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\n                    for (var i = 0, j = descendants.length; i < j; i++)\n                        cleanSingleNode(descendants[i]);\n                }\n            }\n            return node;\n        },\n\n        removeNode : function(node) {\n            ko.cleanNode(node);\n            if (node.parentNode)\n                node.parentNode.removeChild(node);\n        },\n\n        \"cleanExternalData\" : function (node) {\n            // Special support for jQuery here because it's so commonly used.\n            // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\n            // so notify it to tear down any resources associated with the node & descendants here.\n            if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\n                jQueryInstance['cleanData']([node]);\n        }\n    };\n})();\nko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\nko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\nko.exportSymbol('cleanNode', ko.cleanNode);\nko.exportSymbol('removeNode', ko.removeNode);\nko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\nko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\nko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\n(function () {\n    var none = [0, \"\", \"\"],\n        table = [1, \"<table>\", \"</table>\"],\n        tbody = [2, \"<table><tbody>\", \"</tbody></table>\"],\n        tr = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n        select = [1, \"<select multiple='multiple'>\", \"</select>\"],\n        lookup = {\n            'thead': table,\n            'tbody': table,\n            'tfoot': table,\n            'tr': tbody,\n            'td': tr,\n            'th': tr,\n            'option': select,\n            'optgroup': select\n        },\n\n        // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.\n        mayRequireCreateElementHack = ko.utils.ieVersion <= 8;\n\n    function getWrap(tags) {\n        var m = tags.match(/^<([a-z]+)[ >]/);\n        return (m && lookup[m[1]]) || none;\n    }\n\n    function simpleHtmlParse(html, documentContext) {\n        documentContext || (documentContext = document);\n        var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\n\n        // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\n        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\n\n        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\n        // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\n        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\n        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\n\n        // Trim whitespace, otherwise indexOf won't work as expected\n        var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\"),\n            wrap = getWrap(tags),\n            depth = wrap[0];\n\n        // Go to html and back, then peel off extra wrappers\n        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\n        var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\n        if (typeof windowContext['innerShiv'] == \"function\") {\n            // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding\n            // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv\n            // somehow shims the native APIs so it just works anyway)\n            div.appendChild(windowContext['innerShiv'](markup));\n        } else {\n            if (mayRequireCreateElementHack) {\n                // The document.createElement('my-element') trick to enable custom elements in IE6-8\n                // only works if we assign innerHTML on an element associated with that document.\n                documentContext.appendChild(div);\n            }\n\n            div.innerHTML = markup;\n\n            if (mayRequireCreateElementHack) {\n                div.parentNode.removeChild(div);\n            }\n        }\n\n        // Move to the right depth\n        while (depth--)\n            div = div.lastChild;\n\n        return ko.utils.makeArray(div.lastChild.childNodes);\n    }\n\n    function jQueryHtmlParse(html, documentContext) {\n        // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\n        if (jQueryInstance['parseHTML']) {\n            return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\n        } else {\n            // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\n            var elems = jQueryInstance['clean']([html], documentContext);\n\n            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\n            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\n            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\n            if (elems && elems[0]) {\n                // Find the top-most parent element that's a direct child of a document fragment\n                var elem = elems[0];\n                while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\n                    elem = elem.parentNode;\n                // ... then detach it\n                if (elem.parentNode)\n                    elem.parentNode.removeChild(elem);\n            }\n\n            return elems;\n        }\n    }\n\n    ko.utils.parseHtmlFragment = function(html, documentContext) {\n        return jQueryInstance ?\n            jQueryHtmlParse(html, documentContext) :   // As below, benefit from jQuery's optimisations where possible\n            simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\n    };\n\n    ko.utils.setHtml = function(node, html) {\n        ko.utils.emptyDomNode(node);\n\n        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\n        html = ko.utils.unwrapObservable(html);\n\n        if ((html !== null) && (html !== undefined)) {\n            if (typeof html != 'string')\n                html = html.toString();\n\n            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\n            // for example <tr> elements which are not normally allowed to exist on their own.\n            // If you've referenced jQuery we'll use that rather than duplicating its code.\n            if (jQueryInstance) {\n                jQueryInstance(node)['html'](html);\n            } else {\n                // ... otherwise, use KO's own parsing logic.\n                var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\n                for (var i = 0; i < parsedNodes.length; i++)\n                    node.appendChild(parsedNodes[i]);\n            }\n        }\n    };\n})();\n\nko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\nko.exportSymbol('utils.setHtml', ko.utils.setHtml);\n\nko.memoization = (function () {\n    var memos = {};\n\n    function randomMax8HexChars() {\n        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\n    }\n    function generateRandomId() {\n        return randomMax8HexChars() + randomMax8HexChars();\n    }\n    function findMemoNodes(rootNode, appendToArray) {\n        if (!rootNode)\n            return;\n        if (rootNode.nodeType == 8) {\n            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\n            if (memoId != null)\n                appendToArray.push({ domNode: rootNode, memoId: memoId });\n        } else if (rootNode.nodeType == 1) {\n            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\n                findMemoNodes(childNodes[i], appendToArray);\n        }\n    }\n\n    return {\n        memoize: function (callback) {\n            if (typeof callback != \"function\")\n                throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\n            var memoId = generateRandomId();\n            memos[memoId] = callback;\n            return \"<!--[ko_memo:\" + memoId + \"]-->\";\n        },\n\n        unmemoize: function (memoId, callbackParams) {\n            var callback = memos[memoId];\n            if (callback === undefined)\n                throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\n            try {\n                callback.apply(null, callbackParams || []);\n                return true;\n            }\n            finally { delete memos[memoId]; }\n        },\n\n        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\n            var memos = [];\n            findMemoNodes(domNode, memos);\n            for (var i = 0, j = memos.length; i < j; i++) {\n                var node = memos[i].domNode;\n                var combinedParams = [node];\n                if (extraCallbackParamsArray)\n                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\n                ko.memoization.unmemoize(memos[i].memoId, combinedParams);\n                node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\n                if (node.parentNode)\n                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\n            }\n        },\n\n        parseMemoText: function (memoText) {\n            var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\n            return match ? match[1] : null;\n        }\n    };\n})();\n\nko.exportSymbol('memoization', ko.memoization);\nko.exportSymbol('memoization.memoize', ko.memoization.memoize);\nko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\nko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\nko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\nko.tasks = (function () {\n    var scheduler,\n        taskQueue = [],\n        taskQueueLength = 0,\n        nextHandle = 1,\n        nextIndexToProcess = 0;\n\n    if (window['MutationObserver']) {\n        // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+\n        // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT\n        scheduler = (function (callback) {\n            var div = document.createElement(\"div\");\n            new MutationObserver(callback).observe(div, {attributes: true});\n            return function () { div.classList.toggle(\"foo\"); };\n        })(scheduledProcess);\n    } else if (document && \"onreadystatechange\" in document.createElement(\"script\")) {\n        // IE 6-10\n        // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT\n        scheduler = function (callback) {\n            var script = document.createElement(\"script\");\n            script.onreadystatechange = function () {\n                script.onreadystatechange = null;\n                document.documentElement.removeChild(script);\n                script = null;\n                callback();\n            };\n            document.documentElement.appendChild(script);\n        };\n    } else {\n        scheduler = function (callback) {\n            setTimeout(callback, 0);\n        };\n    }\n\n    function processTasks() {\n        if (taskQueueLength) {\n            // Each mark represents the end of a logical group of tasks and the number of these groups is\n            // limited to prevent unchecked recursion.\n            var mark = taskQueueLength, countMarks = 0;\n\n            // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue\n            for (var task; nextIndexToProcess < taskQueueLength; ) {\n                if (task = taskQueue[nextIndexToProcess++]) {\n                    if (nextIndexToProcess > mark) {\n                        if (++countMarks >= 5000) {\n                            nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion\n                            ko.utils.deferError(Error(\"'Too much recursion' after processing \" + countMarks + \" task groups.\"));\n                            break;\n                        }\n                        mark = taskQueueLength;\n                    }\n                    try {\n                        task();\n                    } catch (ex) {\n                        ko.utils.deferError(ex);\n                    }\n                }\n            }\n        }\n    }\n\n    function scheduledProcess() {\n        processTasks();\n\n        // Reset the queue\n        nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\n    }\n\n    function scheduleTaskProcessing() {\n        ko.tasks['scheduler'](scheduledProcess);\n    }\n\n    var tasks = {\n        'scheduler': scheduler,     // Allow overriding the scheduler\n\n        schedule: function (func) {\n            if (!taskQueueLength) {\n                scheduleTaskProcessing();\n            }\n\n            taskQueue[taskQueueLength++] = func;\n            return nextHandle++;\n        },\n\n        cancel: function (handle) {\n            var index = handle - (nextHandle - taskQueueLength);\n            if (index >= nextIndexToProcess && index < taskQueueLength) {\n                taskQueue[index] = null;\n            }\n        },\n\n        // For testing only: reset the queue and return the previous queue length\n        'resetForTesting': function () {\n            var length = taskQueueLength - nextIndexToProcess;\n            nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\n            return length;\n        },\n\n        runEarly: processTasks\n    };\n\n    return tasks;\n})();\n\nko.exportSymbol('tasks', ko.tasks);\nko.exportSymbol('tasks.schedule', ko.tasks.schedule);\n//ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  \"cancel\" isn't minified\nko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);\nko.extenders = {\n    'throttle': function(target, timeout) {\n        // Throttling means two things:\n\n        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\n        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\n        target['throttleEvaluation'] = timeout;\n\n        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\n        //     so the target cannot change value synchronously or faster than a certain rate\n        var writeTimeoutInstance = null;\n        return ko.dependentObservable({\n            'read': target,\n            'write': function(value) {\n                clearTimeout(writeTimeoutInstance);\n                writeTimeoutInstance = ko.utils.setTimeout(function() {\n                    target(value);\n                }, timeout);\n            }\n        });\n    },\n\n    'rateLimit': function(target, options) {\n        var timeout, method, limitFunction;\n\n        if (typeof options == 'number') {\n            timeout = options;\n        } else {\n            timeout = options['timeout'];\n            method = options['method'];\n        }\n\n        // rateLimit supersedes deferred updates\n        target._deferUpdates = false;\n\n        limitFunction = method == 'notifyWhenChangesStop' ?  debounce : throttle;\n        target.limit(function(callback) {\n            return limitFunction(callback, timeout);\n        });\n    },\n\n    'deferred': function(target, options) {\n        if (options !== true) {\n            throw new Error('The \\'deferred\\' extender only accepts the value \\'true\\', because it is not supported to turn deferral off once enabled.')\n        }\n\n        if (!target._deferUpdates) {\n            target._deferUpdates = true;\n            target.limit(function (callback) {\n                var handle,\n                    ignoreUpdates = false;\n                return function () {\n                    if (!ignoreUpdates) {\n                        ko.tasks.cancel(handle);\n                        handle = ko.tasks.schedule(callback);\n\n                        try {\n                            ignoreUpdates = true;\n                            target['notifySubscribers'](undefined, 'dirty');\n                        } finally {\n                            ignoreUpdates = false;\n                        }\n                    }\n                };\n            });\n        }\n    },\n\n    'notify': function(target, notifyWhen) {\n        target[\"equalityComparer\"] = notifyWhen == \"always\" ?\n            null :  // null equalityComparer means to always notify\n            valuesArePrimitiveAndEqual;\n    }\n};\n\nvar primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\nfunction valuesArePrimitiveAndEqual(a, b) {\n    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\n    return oldValueIsPrimitive ? (a === b) : false;\n}\n\nfunction throttle(callback, timeout) {\n    var timeoutInstance;\n    return function () {\n        if (!timeoutInstance) {\n            timeoutInstance = ko.utils.setTimeout(function () {\n                timeoutInstance = undefined;\n                callback();\n            }, timeout);\n        }\n    };\n}\n\nfunction debounce(callback, timeout) {\n    var timeoutInstance;\n    return function () {\n        clearTimeout(timeoutInstance);\n        timeoutInstance = ko.utils.setTimeout(callback, timeout);\n    };\n}\n\nfunction applyExtenders(requestedExtenders) {\n    var target = this;\n    if (requestedExtenders) {\n        ko.utils.objectForEach(requestedExtenders, function(key, value) {\n            var extenderHandler = ko.extenders[key];\n            if (typeof extenderHandler == 'function') {\n                target = extenderHandler(target, value) || target;\n            }\n        });\n    }\n    return target;\n}\n\nko.exportSymbol('extenders', ko.extenders);\n\nko.subscription = function (target, callback, disposeCallback) {\n    this._target = target;\n    this.callback = callback;\n    this.disposeCallback = disposeCallback;\n    this.isDisposed = false;\n    ko.exportProperty(this, 'dispose', this.dispose);\n};\nko.subscription.prototype.dispose = function () {\n    this.isDisposed = true;\n    this.disposeCallback();\n};\n\nko.subscribable = function () {\n    ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);\n    ko_subscribable_fn.init(this);\n}\n\nvar defaultEvent = \"change\";\n\n// Moved out of \"limit\" to avoid the extra closure\nfunction limitNotifySubscribers(value, event) {\n    if (!event || event === defaultEvent) {\n        this._limitChange(value);\n    } else if (event === 'beforeChange') {\n        this._limitBeforeChange(value);\n    } else {\n        this._origNotifySubscribers(value, event);\n    }\n}\n\nvar ko_subscribable_fn = {\n    init: function(instance) {\n        instance._subscriptions = { \"change\": [] };\n        instance._versionNumber = 1;\n    },\n\n    subscribe: function (callback, callbackTarget, event) {\n        var self = this;\n\n        event = event || defaultEvent;\n        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\n\n        var subscription = new ko.subscription(self, boundCallback, function () {\n            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\n            if (self.afterSubscriptionRemove)\n                self.afterSubscriptionRemove(event);\n        });\n\n        if (self.beforeSubscriptionAdd)\n            self.beforeSubscriptionAdd(event);\n\n        if (!self._subscriptions[event])\n            self._subscriptions[event] = [];\n        self._subscriptions[event].push(subscription);\n\n        return subscription;\n    },\n\n    \"notifySubscribers\": function (valueToNotify, event) {\n        event = event || defaultEvent;\n        if (event === defaultEvent) {\n            this.updateVersion();\n        }\n        if (this.hasSubscriptionsForEvent(event)) {\n            var subs = event === defaultEvent && this._changeSubscriptions || this._subscriptions[event].slice(0);\n            try {\n                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\n                for (var i = 0, subscription; subscription = subs[i]; ++i) {\n                    // In case a subscription was disposed during the arrayForEach cycle, check\n                    // for isDisposed on each subscription before invoking its callback\n                    if (!subscription.isDisposed)\n                        subscription.callback(valueToNotify);\n                }\n            } finally {\n                ko.dependencyDetection.end(); // End suppressing dependency detection\n            }\n        }\n    },\n\n    getVersion: function () {\n        return this._versionNumber;\n    },\n\n    hasChanged: function (versionToCheck) {\n        return this.getVersion() !== versionToCheck;\n    },\n\n    updateVersion: function () {\n        ++this._versionNumber;\n    },\n\n    limit: function(limitFunction) {\n        var self = this, selfIsObservable = ko.isObservable(self),\n            ignoreBeforeChange, notifyNextChange, previousValue, pendingValue, beforeChange = 'beforeChange';\n\n        if (!self._origNotifySubscribers) {\n            self._origNotifySubscribers = self[\"notifySubscribers\"];\n            self[\"notifySubscribers\"] = limitNotifySubscribers;\n        }\n\n        var finish = limitFunction(function() {\n            self._notificationIsPending = false;\n\n            // If an observable provided a reference to itself, access it to get the latest value.\n            // This allows computed observables to delay calculating their value until needed.\n            if (selfIsObservable && pendingValue === self) {\n                pendingValue = self._evalIfChanged ? self._evalIfChanged() : self();\n            }\n            var shouldNotify = notifyNextChange || self.isDifferent(previousValue, pendingValue);\n\n            notifyNextChange = ignoreBeforeChange = false;\n\n            if (shouldNotify) {\n                self._origNotifySubscribers(previousValue = pendingValue);\n            }\n        });\n\n        self._limitChange = function(value) {\n            self._changeSubscriptions = self._subscriptions[defaultEvent].slice(0);\n            self._notificationIsPending = ignoreBeforeChange = true;\n            pendingValue = value;\n            finish();\n        };\n        self._limitBeforeChange = function(value) {\n            if (!ignoreBeforeChange) {\n                previousValue = value;\n                self._origNotifySubscribers(value, beforeChange);\n            }\n        };\n        self._notifyNextChangeIfValueIsDifferent = function() {\n            if (self.isDifferent(previousValue, self.peek(true /*evaluate*/))) {\n                notifyNextChange = true;\n            }\n        };\n    },\n\n    hasSubscriptionsForEvent: function(event) {\n        return this._subscriptions[event] && this._subscriptions[event].length;\n    },\n\n    getSubscriptionsCount: function (event) {\n        if (event) {\n            return this._subscriptions[event] && this._subscriptions[event].length || 0;\n        } else {\n            var total = 0;\n            ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\n                if (eventName !== 'dirty')\n                    total += subscriptions.length;\n            });\n            return total;\n        }\n    },\n\n    isDifferent: function(oldValue, newValue) {\n        return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\n    },\n\n    extend: applyExtenders\n};\n\nko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\nko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\nko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\n\n// For browsers that support proto assignment, we overwrite the prototype of each\n// observable instance. Since observables are functions, we need Function.prototype\n// to still be in the prototype chain.\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\n}\n\nko.subscribable['fn'] = ko_subscribable_fn;\n\n\nko.isSubscribable = function (instance) {\n    return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\n};\n\nko.exportSymbol('subscribable', ko.subscribable);\nko.exportSymbol('isSubscribable', ko.isSubscribable);\n\nko.computedContext = ko.dependencyDetection = (function () {\n    var outerFrames = [],\n        currentFrame,\n        lastId = 0;\n\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\n    // Theoretically, you could eventually overflow the number storage size, resulting\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\n    // take over 285 years to reach that number.\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\n    function getId() {\n        return ++lastId;\n    }\n\n    function begin(options) {\n        outerFrames.push(currentFrame);\n        currentFrame = options;\n    }\n\n    function end() {\n        currentFrame = outerFrames.pop();\n    }\n\n    return {\n        begin: begin,\n\n        end: end,\n\n        registerDependency: function (subscribable) {\n            if (currentFrame) {\n                if (!ko.isSubscribable(subscribable))\n                    throw new Error(\"Only subscribable things can act as dependencies\");\n                currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\n            }\n        },\n\n        ignore: function (callback, callbackTarget, callbackArgs) {\n            try {\n                begin();\n                return callback.apply(callbackTarget, callbackArgs || []);\n            } finally {\n                end();\n            }\n        },\n\n        getDependenciesCount: function () {\n            if (currentFrame)\n                return currentFrame.computed.getDependenciesCount();\n        },\n\n        isInitial: function() {\n            if (currentFrame)\n                return currentFrame.isInitial;\n        }\n    };\n})();\n\nko.exportSymbol('computedContext', ko.computedContext);\nko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\nko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\n\nko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\nvar observableLatestValue = ko.utils.createSymbolOrString('_latestValue');\n\nko.observable = function (initialValue) {\n    function observable() {\n        if (arguments.length > 0) {\n            // Write\n\n            // Ignore writes if the value hasn't changed\n            if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {\n                observable.valueWillMutate();\n                observable[observableLatestValue] = arguments[0];\n                observable.valueHasMutated();\n            }\n            return this; // Permits chained assignments\n        }\n        else {\n            // Read\n            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\n            return observable[observableLatestValue];\n        }\n    }\n\n    observable[observableLatestValue] = initialValue;\n\n    // Inherit from 'subscribable'\n    if (!ko.utils.canSetPrototype) {\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\n        ko.utils.extend(observable, ko.subscribable['fn']);\n    }\n    ko.subscribable['fn'].init(observable);\n\n    // Inherit from 'observable'\n    ko.utils.setPrototypeOfOrExtend(observable, observableFn);\n\n    if (ko.options['deferUpdates']) {\n        ko.extenders['deferred'](observable, true);\n    }\n\n    return observable;\n}\n\n// Define prototype for observables\nvar observableFn = {\n    'equalityComparer': valuesArePrimitiveAndEqual,\n    peek: function() { return this[observableLatestValue]; },\n    valueHasMutated: function () { this['notifySubscribers'](this[observableLatestValue]); },\n    valueWillMutate: function () { this['notifySubscribers'](this[observableLatestValue], 'beforeChange'); }\n};\n\n// Note that for browsers that don't support proto assignment, the\n// inheritance chain is created manually in the ko.observable constructor\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);\n}\n\nvar protoProperty = ko.observable.protoProperty = '__ko_proto__';\nobservableFn[protoProperty] = ko.observable;\n\nko.hasPrototype = function(instance, prototype) {\n    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;\n    if (instance[protoProperty] === prototype) return true;\n    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\n};\n\nko.isObservable = function (instance) {\n    return ko.hasPrototype(instance, ko.observable);\n}\nko.isWriteableObservable = function (instance) {\n    // Observable\n    if ((typeof instance == 'function') && instance[protoProperty] === ko.observable)\n        return true;\n    // Writeable dependent observable\n    if ((typeof instance == 'function') && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))\n        return true;\n    // Anything else\n    return false;\n}\n\nko.exportSymbol('observable', ko.observable);\nko.exportSymbol('isObservable', ko.isObservable);\nko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\nko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\nko.exportSymbol('observable.fn', observableFn);\nko.exportProperty(observableFn, 'peek', observableFn.peek);\nko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);\nko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);\nko.observableArray = function (initialValues) {\n    initialValues = initialValues || [];\n\n    if (typeof initialValues != 'object' || !('length' in initialValues))\n        throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\n\n    var result = ko.observable(initialValues);\n    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\n    return result.extend({'trackArrayChanges':true});\n};\n\nko.observableArray['fn'] = {\n    'remove': function (valueOrPredicate) {\n        var underlyingArray = this.peek();\n        var removedValues = [];\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\n        for (var i = 0; i < underlyingArray.length; i++) {\n            var value = underlyingArray[i];\n            if (predicate(value)) {\n                if (removedValues.length === 0) {\n                    this.valueWillMutate();\n                }\n                removedValues.push(value);\n                underlyingArray.splice(i, 1);\n                i--;\n            }\n        }\n        if (removedValues.length) {\n            this.valueHasMutated();\n        }\n        return removedValues;\n    },\n\n    'removeAll': function (arrayOfValues) {\n        // If you passed zero args, we remove everything\n        if (arrayOfValues === undefined) {\n            var underlyingArray = this.peek();\n            var allValues = underlyingArray.slice(0);\n            this.valueWillMutate();\n            underlyingArray.splice(0, underlyingArray.length);\n            this.valueHasMutated();\n            return allValues;\n        }\n        // If you passed an arg, we interpret it as an array of entries to remove\n        if (!arrayOfValues)\n            return [];\n        return this['remove'](function (value) {\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\n        });\n    },\n\n    'destroy': function (valueOrPredicate) {\n        var underlyingArray = this.peek();\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\n        this.valueWillMutate();\n        for (var i = underlyingArray.length - 1; i >= 0; i--) {\n            var value = underlyingArray[i];\n            if (predicate(value))\n                underlyingArray[i][\"_destroy\"] = true;\n        }\n        this.valueHasMutated();\n    },\n\n    'destroyAll': function (arrayOfValues) {\n        // If you passed zero args, we destroy everything\n        if (arrayOfValues === undefined)\n            return this['destroy'](function() { return true });\n\n        // If you passed an arg, we interpret it as an array of entries to destroy\n        if (!arrayOfValues)\n            return [];\n        return this['destroy'](function (value) {\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\n        });\n    },\n\n    'indexOf': function (item) {\n        var underlyingArray = this();\n        return ko.utils.arrayIndexOf(underlyingArray, item);\n    },\n\n    'replace': function(oldItem, newItem) {\n        var index = this['indexOf'](oldItem);\n        if (index >= 0) {\n            this.valueWillMutate();\n            this.peek()[index] = newItem;\n            this.valueHasMutated();\n        }\n    }\n};\n\n// Note that for browsers that don't support proto assignment, the\n// inheritance chain is created manually in the ko.observableArray constructor\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\n}\n\n// Populate ko.observableArray.fn with read/write functions from native arrays\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\n// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\nko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\n    ko.observableArray['fn'][methodName] = function () {\n        // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\n        // (for consistency with mutating regular observables)\n        var underlyingArray = this.peek();\n        this.valueWillMutate();\n        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\n        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\n        this.valueHasMutated();\n        // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.\n        return methodCallResult === underlyingArray ? this : methodCallResult;\n    };\n});\n\n// Populate ko.observableArray.fn with read-only functions from native arrays\nko.utils.arrayForEach([\"slice\"], function (methodName) {\n    ko.observableArray['fn'][methodName] = function () {\n        var underlyingArray = this();\n        return underlyingArray[methodName].apply(underlyingArray, arguments);\n    };\n});\n\nko.exportSymbol('observableArray', ko.observableArray);\nvar arrayChangeEventName = 'arrayChange';\nko.extenders['trackArrayChanges'] = function(target, options) {\n    // Use the provided options--each call to trackArrayChanges overwrites the previously set options\n    target.compareArrayOptions = {};\n    if (options && typeof options == \"object\") {\n        ko.utils.extend(target.compareArrayOptions, options);\n    }\n    target.compareArrayOptions['sparse'] = true;\n\n    // Only modify the target observable once\n    if (target.cacheDiffForKnownOperation) {\n        return;\n    }\n    var trackingChanges = false,\n        cachedDiff = null,\n        arrayChangeSubscription,\n        pendingNotifications = 0,\n        underlyingNotifySubscribersFunction,\n        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\n        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\n\n    // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\n    target.beforeSubscriptionAdd = function (event) {\n        if (underlyingBeforeSubscriptionAddFunction)\n            underlyingBeforeSubscriptionAddFunction.call(target, event);\n        if (event === arrayChangeEventName) {\n            trackChanges();\n        }\n    };\n    // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\n    target.afterSubscriptionRemove = function (event) {\n        if (underlyingAfterSubscriptionRemoveFunction)\n            underlyingAfterSubscriptionRemoveFunction.call(target, event);\n        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\n            if (underlyingNotifySubscribersFunction) {\n                target['notifySubscribers'] = underlyingNotifySubscribersFunction;\n                underlyingNotifySubscribersFunction = undefined;\n            }\n            arrayChangeSubscription.dispose();\n            trackingChanges = false;\n        }\n    };\n\n    function trackChanges() {\n        // Calling 'trackChanges' multiple times is the same as calling it once\n        if (trackingChanges) {\n            return;\n        }\n\n        trackingChanges = true;\n\n        // Intercept \"notifySubscribers\" to track how many times it was called.\n        underlyingNotifySubscribersFunction = target['notifySubscribers'];\n        target['notifySubscribers'] = function(valueToNotify, event) {\n            if (!event || event === defaultEvent) {\n                ++pendingNotifications;\n            }\n            return underlyingNotifySubscribersFunction.apply(this, arguments);\n        };\n\n        // Each time the array changes value, capture a clone so that on the next\n        // change it's possible to produce a diff\n        var previousContents = [].concat(target.peek() || []);\n        cachedDiff = null;\n        arrayChangeSubscription = target.subscribe(function(currentContents) {\n            // Make a copy of the current contents and ensure it's an array\n            currentContents = [].concat(currentContents || []);\n\n            // Compute the diff and issue notifications, but only if someone is listening\n            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\n                var changes = getChanges(previousContents, currentContents);\n            }\n\n            // Eliminate references to the old, removed items, so they can be GCed\n            previousContents = currentContents;\n            cachedDiff = null;\n            pendingNotifications = 0;\n\n            if (changes && changes.length) {\n                target['notifySubscribers'](changes, arrayChangeEventName);\n            }\n        });\n    }\n\n    function getChanges(previousContents, currentContents) {\n        // We try to re-use cached diffs.\n        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\n        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\n        // notifications are issued immediately so we wouldn't be queueing up more than one.\n        if (!cachedDiff || pendingNotifications > 1) {\n            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);\n        }\n\n        return cachedDiff;\n    }\n\n    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\n        // Only run if we're currently tracking changes for this observable array\n        // and there aren't any pending deferred notifications.\n        if (!trackingChanges || pendingNotifications) {\n            return;\n        }\n        var diff = [],\n            arrayLength = rawArray.length,\n            argsLength = args.length,\n            offset = 0;\n\n        function pushDiff(status, value, index) {\n            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\n        }\n        switch (operationName) {\n            case 'push':\n                offset = arrayLength;\n            case 'unshift':\n                for (var index = 0; index < argsLength; index++) {\n                    pushDiff('added', args[index], offset + index);\n                }\n                break;\n\n            case 'pop':\n                offset = arrayLength - 1;\n            case 'shift':\n                if (arrayLength) {\n                    pushDiff('deleted', rawArray[offset], offset);\n                }\n                break;\n\n            case 'splice':\n                // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n                var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\n                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\n                    endAddIndex = startIndex + argsLength - 2,\n                    endIndex = Math.max(endDeleteIndex, endAddIndex),\n                    additions = [], deletions = [];\n                for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\n                    if (index < endDeleteIndex)\n                        deletions.push(pushDiff('deleted', rawArray[index], index));\n                    if (index < endAddIndex)\n                        additions.push(pushDiff('added', args[argsIndex], index));\n                }\n                ko.utils.findMovesInArrayComparison(deletions, additions);\n                break;\n\n            default:\n                return;\n        }\n        cachedDiff = diff;\n    };\n};\nvar computedState = ko.utils.createSymbolOrString('_state');\n\nko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\n    if (typeof evaluatorFunctionOrOptions === \"object\") {\n        // Single-parameter syntax - everything is on this \"options\" param\n        options = evaluatorFunctionOrOptions;\n    } else {\n        // Multi-parameter syntax - construct the options according to the params passed\n        options = options || {};\n        if (evaluatorFunctionOrOptions) {\n            options[\"read\"] = evaluatorFunctionOrOptions;\n        }\n    }\n    if (typeof options[\"read\"] != \"function\")\n        throw Error(\"Pass a function that returns the value of the ko.computed\");\n\n    var writeFunction = options[\"write\"];\n    var state = {\n        latestValue: undefined,\n        isStale: true,\n        isDirty: true,\n        isBeingEvaluated: false,\n        suppressDisposalUntilDisposeWhenReturnsFalse: false,\n        isDisposed: false,\n        pure: false,\n        isSleeping: false,\n        readFunction: options[\"read\"],\n        evaluatorFunctionTarget: evaluatorFunctionTarget || options[\"owner\"],\n        disposeWhenNodeIsRemoved: options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\n        disposeWhen: options[\"disposeWhen\"] || options.disposeWhen,\n        domNodeDisposalCallback: null,\n        dependencyTracking: {},\n        dependenciesCount: 0,\n        evaluationTimeoutInstance: null\n    };\n\n    function computedObservable() {\n        if (arguments.length > 0) {\n            if (typeof writeFunction === \"function\") {\n                // Writing a value\n                writeFunction.apply(state.evaluatorFunctionTarget, arguments);\n            } else {\n                throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\n            }\n            return this; // Permits chained assignments\n        } else {\n            // Reading the value\n            ko.dependencyDetection.registerDependency(computedObservable);\n            if (state.isDirty || (state.isSleeping && computedObservable.haveDependenciesChanged())) {\n                computedObservable.evaluateImmediate();\n            }\n            return state.latestValue;\n        }\n    }\n\n    computedObservable[computedState] = state;\n    computedObservable.hasWriteFunction = typeof writeFunction === \"function\";\n\n    // Inherit from 'subscribable'\n    if (!ko.utils.canSetPrototype) {\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\n        ko.utils.extend(computedObservable, ko.subscribable['fn']);\n    }\n    ko.subscribable['fn'].init(computedObservable);\n\n    // Inherit from 'computed'\n    ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);\n\n    if (options['pure']) {\n        state.pure = true;\n        state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription\n        ko.utils.extend(computedObservable, pureComputedOverrides);\n    } else if (options['deferEvaluation']) {\n        ko.utils.extend(computedObservable, deferEvaluationOverrides);\n    }\n\n    if (ko.options['deferUpdates']) {\n        ko.extenders['deferred'](computedObservable, true);\n    }\n\n    if (DEBUG) {\n        // #1731 - Aid debugging by exposing the computed's options\n        computedObservable[\"_options\"] = options;\n    }\n\n    if (state.disposeWhenNodeIsRemoved) {\n        // Since this computed is associated with a DOM node, and we don't want to dispose the computed\n        // until the DOM node is *removed* from the document (as opposed to never having been in the document),\n        // we'll prevent disposal until \"disposeWhen\" first returns false.\n        state.suppressDisposalUntilDisposeWhenReturnsFalse = true;\n\n        // disposeWhenNodeIsRemoved: true can be used to opt into the \"only dispose after first false result\"\n        // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try\n        // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't\n        // be documented or used by application code, as it's likely to change in a future version of KO.\n        if (!state.disposeWhenNodeIsRemoved.nodeType) {\n            state.disposeWhenNodeIsRemoved = null;\n        }\n    }\n\n    // Evaluate, unless sleeping or deferEvaluation is true\n    if (!state.isSleeping && !options['deferEvaluation']) {\n        computedObservable.evaluateImmediate();\n    }\n\n    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\n    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\n    if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {\n        ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {\n            computedObservable.dispose();\n        });\n    }\n\n    return computedObservable;\n};\n\n// Utility function that disposes a given dependencyTracking entry\nfunction computedDisposeDependencyCallback(id, entryToDispose) {\n    if (entryToDispose !== null && entryToDispose.dispose) {\n        entryToDispose.dispose();\n    }\n}\n\n// This function gets called each time a dependency is detected while evaluating a computed.\n// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.\nfunction computedBeginDependencyDetectionCallback(subscribable, id) {\n    var computedObservable = this.computedObservable,\n        state = computedObservable[computedState];\n    if (!state.isDisposed) {\n        if (this.disposalCount && this.disposalCandidates[id]) {\n            // Don't want to dispose this subscription, as it's still being used\n            computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);\n            this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway\n            --this.disposalCount;\n        } else if (!state.dependencyTracking[id]) {\n            // Brand new subscription - add it\n            computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));\n        }\n        // If the observable we've accessed has a pending notification, ensure we get notified of the actual final value (bypass equality checks)\n        if (subscribable._notificationIsPending) {\n            subscribable._notifyNextChangeIfValueIsDifferent();\n        }\n    }\n}\n\nvar computedFn = {\n    \"equalityComparer\": valuesArePrimitiveAndEqual,\n    getDependenciesCount: function () {\n        return this[computedState].dependenciesCount;\n    },\n    addDependencyTracking: function (id, target, trackingObj) {\n        if (this[computedState].pure && target === this) {\n            throw Error(\"A 'pure' computed must not be called recursively\");\n        }\n\n        this[computedState].dependencyTracking[id] = trackingObj;\n        trackingObj._order = this[computedState].dependenciesCount++;\n        trackingObj._version = target.getVersion();\n    },\n    haveDependenciesChanged: function () {\n        var id, dependency, dependencyTracking = this[computedState].dependencyTracking;\n        for (id in dependencyTracking) {\n            if (dependencyTracking.hasOwnProperty(id)) {\n                dependency = dependencyTracking[id];\n                if ((this._evalDelayed && dependency._target._notificationIsPending) || dependency._target.hasChanged(dependency._version)) {\n                    return true;\n                }\n            }\n        }\n    },\n    markDirty: function () {\n        // Process \"dirty\" events if we can handle delayed notifications\n        if (this._evalDelayed && !this[computedState].isBeingEvaluated) {\n            this._evalDelayed(false /*isChange*/);\n        }\n    },\n    isActive: function () {\n        var state = this[computedState];\n        return state.isDirty || state.dependenciesCount > 0;\n    },\n    respondToChange: function () {\n        // Ignore \"change\" events if we've already scheduled a delayed notification\n        if (!this._notificationIsPending) {\n            this.evaluatePossiblyAsync();\n        } else if (this[computedState].isDirty) {\n            this[computedState].isStale = true;\n        }\n    },\n    subscribeToDependency: function (target) {\n        if (target._deferUpdates && !this[computedState].disposeWhenNodeIsRemoved) {\n            var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),\n                changeSub = target.subscribe(this.respondToChange, this);\n            return {\n                _target: target,\n                dispose: function () {\n                    dirtySub.dispose();\n                    changeSub.dispose();\n                }\n            };\n        } else {\n            return target.subscribe(this.evaluatePossiblyAsync, this);\n        }\n    },\n    evaluatePossiblyAsync: function () {\n        var computedObservable = this,\n            throttleEvaluationTimeout = computedObservable['throttleEvaluation'];\n        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\n            clearTimeout(this[computedState].evaluationTimeoutInstance);\n            this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {\n                computedObservable.evaluateImmediate(true /*notifyChange*/);\n            }, throttleEvaluationTimeout);\n        } else if (computedObservable._evalDelayed) {\n            computedObservable._evalDelayed(true /*isChange*/);\n        } else {\n            computedObservable.evaluateImmediate(true /*notifyChange*/);\n        }\n    },\n    evaluateImmediate: function (notifyChange) {\n        var computedObservable = this,\n            state = computedObservable[computedState],\n            disposeWhen = state.disposeWhen,\n            changed = false;\n\n        if (state.isBeingEvaluated) {\n            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\n            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\n            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\n            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\n            return;\n        }\n\n        // Do not evaluate (and possibly capture new dependencies) if disposed\n        if (state.isDisposed) {\n            return;\n        }\n\n        if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {\n            // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse\n            if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {\n                computedObservable.dispose();\n                return;\n            }\n        } else {\n            // It just did return false, so we can stop suppressing now\n            state.suppressDisposalUntilDisposeWhenReturnsFalse = false;\n        }\n\n        state.isBeingEvaluated = true;\n        try {\n            changed = this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);\n        } finally {\n            state.isBeingEvaluated = false;\n        }\n\n        if (!state.dependenciesCount) {\n            computedObservable.dispose();\n        }\n\n        return changed;\n    },\n    evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {\n        // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.\n        // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,\n        // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).\n\n        var computedObservable = this,\n            state = computedObservable[computedState],\n            changed = false;\n\n        // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\n        // Then, during evaluation, we cross off any that are in fact still being used.\n        var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time\n            dependencyDetectionContext = {\n                computedObservable: computedObservable,\n                disposalCandidates: state.dependencyTracking,\n                disposalCount: state.dependenciesCount\n            };\n\n        ko.dependencyDetection.begin({\n            callbackTarget: dependencyDetectionContext,\n            callback: computedBeginDependencyDetectionCallback,\n            computed: computedObservable,\n            isInitial: isInitial\n        });\n\n        state.dependencyTracking = {};\n        state.dependenciesCount = 0;\n\n        var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);\n\n        if (computedObservable.isDifferent(state.latestValue, newValue)) {\n            if (!state.isSleeping) {\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"beforeChange\");\n            }\n\n            state.latestValue = newValue;\n            if (DEBUG) computedObservable._latestValue = newValue;\n\n            if (state.isSleeping) {\n                computedObservable.updateVersion();\n            } else if (notifyChange) {\n                computedObservable[\"notifySubscribers\"](state.latestValue);\n            }\n\n            changed = true;\n        }\n\n        if (isInitial) {\n            computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\n        }\n\n        return changed;\n    },\n    evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {\n        // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.\n        // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection\n        // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU\n        // overhead of computed evaluation (on V8 at least).\n\n        try {\n            var readFunction = state.readFunction;\n            return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();\n        } finally {\n            ko.dependencyDetection.end();\n\n            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\n            if (dependencyDetectionContext.disposalCount && !state.isSleeping) {\n                ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);\n            }\n\n            state.isStale = state.isDirty = false;\n        }\n    },\n    peek: function (evaluate) {\n        // By default, peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\n        // Pass in true to evaluate if needed.\n        var state = this[computedState];\n        if ((state.isDirty && (evaluate || !state.dependenciesCount)) || (state.isSleeping && this.haveDependenciesChanged())) {\n            this.evaluateImmediate();\n        }\n        return state.latestValue;\n    },\n    limit: function (limitFunction) {\n        // Override the limit function with one that delays evaluation as well\n        ko.subscribable['fn'].limit.call(this, limitFunction);\n        this._evalIfChanged = function () {\n            if (this[computedState].isStale) {\n                this.evaluateImmediate();\n            } else {\n                this[computedState].isDirty = false;\n            }\n            return this[computedState].latestValue;\n        };\n        this._evalDelayed = function (isChange) {\n            this._limitBeforeChange(this[computedState].latestValue);\n\n            // Mark as dirty\n            this[computedState].isDirty = true;\n            if (isChange) {\n                this[computedState].isStale = true;\n            }\n\n            // Pass the observable to the \"limit\" code, which will evaluate it when\n            // it's time to do the notification.\n            this._limitChange(this);\n        };\n    },\n    dispose: function () {\n        var state = this[computedState];\n        if (!state.isSleeping && state.dependencyTracking) {\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                if (dependency.dispose)\n                    dependency.dispose();\n            });\n        }\n        if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {\n            ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);\n        }\n        state.dependencyTracking = null;\n        state.dependenciesCount = 0;\n        state.isDisposed = true;\n        state.isStale = false;\n        state.isDirty = false;\n        state.isSleeping = false;\n        state.disposeWhenNodeIsRemoved = null;\n    }\n};\n\nvar pureComputedOverrides = {\n    beforeSubscriptionAdd: function (event) {\n        // If asleep, wake up the computed by subscribing to any dependencies.\n        var computedObservable = this,\n            state = computedObservable[computedState];\n        if (!state.isDisposed && state.isSleeping && event == 'change') {\n            state.isSleeping = false;\n            if (state.isStale || computedObservable.haveDependenciesChanged()) {\n                state.dependencyTracking = null;\n                state.dependenciesCount = 0;\n                if (computedObservable.evaluateImmediate()) {\n                    computedObservable.updateVersion();\n                }\n            } else {\n                // First put the dependencies in order\n                var dependeciesOrder = [];\n                ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                    dependeciesOrder[dependency._order] = id;\n                });\n                // Next, subscribe to each one\n                ko.utils.arrayForEach(dependeciesOrder, function (id, order) {\n                    var dependency = state.dependencyTracking[id],\n                        subscription = computedObservable.subscribeToDependency(dependency._target);\n                    subscription._order = order;\n                    subscription._version = dependency._version;\n                    state.dependencyTracking[id] = subscription;\n                });\n            }\n            if (!state.isDisposed) {     // test since evaluating could trigger disposal\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\n            }\n        }\n    },\n    afterSubscriptionRemove: function (event) {\n        var state = this[computedState];\n        if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                if (dependency.dispose) {\n                    state.dependencyTracking[id] = {\n                        _target: dependency._target,\n                        _order: dependency._order,\n                        _version: dependency._version\n                    };\n                    dependency.dispose();\n                }\n            });\n            state.isSleeping = true;\n            this[\"notifySubscribers\"](undefined, \"asleep\");\n        }\n    },\n    getVersion: function () {\n        // Because a pure computed is not automatically updated while it is sleeping, we can't\n        // simply return the version number. Instead, we check if any of the dependencies have\n        // changed and conditionally re-evaluate the computed observable.\n        var state = this[computedState];\n        if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {\n            this.evaluateImmediate();\n        }\n        return ko.subscribable['fn'].getVersion.call(this);\n    }\n};\n\nvar deferEvaluationOverrides = {\n    beforeSubscriptionAdd: function (event) {\n        // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.\n        if (event == 'change' || event == 'beforeChange') {\n            this.peek();\n        }\n    }\n};\n\n// Note that for browsers that don't support proto assignment, the\n// inheritance chain is created manually in the ko.computed constructor\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);\n}\n\n// Set the proto chain values for ko.hasPrototype\nvar protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\nko.computed[protoProp] = ko.observable;\ncomputedFn[protoProp] = ko.computed;\n\nko.isComputed = function (instance) {\n    return ko.hasPrototype(instance, ko.computed);\n};\n\nko.isPureComputed = function (instance) {\n    return ko.hasPrototype(instance, ko.computed)\n        && instance[computedState] && instance[computedState].pure;\n};\n\nko.exportSymbol('computed', ko.computed);\nko.exportSymbol('dependentObservable', ko.computed);    // export ko.dependentObservable for backwards compatibility (1.x)\nko.exportSymbol('isComputed', ko.isComputed);\nko.exportSymbol('isPureComputed', ko.isPureComputed);\nko.exportSymbol('computed.fn', computedFn);\nko.exportProperty(computedFn, 'peek', computedFn.peek);\nko.exportProperty(computedFn, 'dispose', computedFn.dispose);\nko.exportProperty(computedFn, 'isActive', computedFn.isActive);\nko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);\n\nko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\n    if (typeof evaluatorFunctionOrOptions === 'function') {\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\n    } else {\n        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\n        evaluatorFunctionOrOptions['pure'] = true;\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\n    }\n}\nko.exportSymbol('pureComputed', ko.pureComputed);\n\n(function() {\n    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)\n\n    ko.toJS = function(rootObject) {\n        if (arguments.length == 0)\n            throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\n\n        // We just unwrap everything at every level in the object graph\n        return mapJsObjectGraph(rootObject, function(valueToMap) {\n            // Loop because an observable's value might in turn be another observable wrapper\n            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\n                valueToMap = valueToMap();\n            return valueToMap;\n        });\n    };\n\n    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\n        var plainJavaScriptObject = ko.toJS(rootObject);\n        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\n    };\n\n    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\n        visitedObjects = visitedObjects || new objectLookup();\n\n        rootObject = mapInputCallback(rootObject);\n        var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\n        if (!canHaveProperties)\n            return rootObject;\n\n        var outputProperties = rootObject instanceof Array ? [] : {};\n        visitedObjects.save(rootObject, outputProperties);\n\n        visitPropertiesOrArrayEntries(rootObject, function(indexer) {\n            var propertyValue = mapInputCallback(rootObject[indexer]);\n\n            switch (typeof propertyValue) {\n                case \"boolean\":\n                case \"number\":\n                case \"string\":\n                case \"function\":\n                    outputProperties[indexer] = propertyValue;\n                    break;\n                case \"object\":\n                case \"undefined\":\n                    var previouslyMappedValue = visitedObjects.get(propertyValue);\n                    outputProperties[indexer] = (previouslyMappedValue !== undefined)\n                        ? previouslyMappedValue\n                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\n                    break;\n            }\n        });\n\n        return outputProperties;\n    }\n\n    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\n        if (rootObject instanceof Array) {\n            for (var i = 0; i < rootObject.length; i++)\n                visitorCallback(i);\n\n            // For arrays, also respect toJSON property for custom mappings (fixes #278)\n            if (typeof rootObject['toJSON'] == 'function')\n                visitorCallback('toJSON');\n        } else {\n            for (var propertyName in rootObject) {\n                visitorCallback(propertyName);\n            }\n        }\n    };\n\n    function objectLookup() {\n        this.keys = [];\n        this.values = [];\n    };\n\n    objectLookup.prototype = {\n        constructor: objectLookup,\n        save: function(key, value) {\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\n            if (existingIndex >= 0)\n                this.values[existingIndex] = value;\n            else {\n                this.keys.push(key);\n                this.values.push(value);\n            }\n        },\n        get: function(key) {\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\n            return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\n        }\n    };\n})();\n\nko.exportSymbol('toJS', ko.toJS);\nko.exportSymbol('toJSON', ko.toJSON);\n(function () {\n    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\n\n    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\n    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\n    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\n    ko.selectExtensions = {\n        readValue : function(element) {\n            switch (ko.utils.tagNameLower(element)) {\n                case 'option':\n                    if (element[hasDomDataExpandoProperty] === true)\n                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\n                    return ko.utils.ieVersion <= 7\n                        ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\n                        : element.value;\n                case 'select':\n                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\n                default:\n                    return element.value;\n            }\n        },\n\n        writeValue: function(element, value, allowUnset) {\n            switch (ko.utils.tagNameLower(element)) {\n                case 'option':\n                    switch(typeof value) {\n                        case \"string\":\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\n                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\n                                delete element[hasDomDataExpandoProperty];\n                            }\n                            element.value = value;\n                            break;\n                        default:\n                            // Store arbitrary object using DomData\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\n                            element[hasDomDataExpandoProperty] = true;\n\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\n                            element.value = typeof value === \"number\" ? value : \"\";\n                            break;\n                    }\n                    break;\n                case 'select':\n                    if (value === \"\" || value === null)       // A blank string or null value will select the caption\n                        value = undefined;\n                    var selection = -1;\n                    for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\n                        optionValue = ko.selectExtensions.readValue(element.options[i]);\n                        // Include special check to handle selecting a caption with a blank string value\n                        if (optionValue == value || (optionValue == \"\" && value === undefined)) {\n                            selection = i;\n                            break;\n                        }\n                    }\n                    if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\n                        element.selectedIndex = selection;\n                    }\n                    break;\n                default:\n                    if ((value === null) || (value === undefined))\n                        value = \"\";\n                    element.value = value;\n                    break;\n            }\n        }\n    };\n})();\n\nko.exportSymbol('selectExtensions', ko.selectExtensions);\nko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\nko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\nko.expressionRewriting = (function () {\n    var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\n\n    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\n    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\n    // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\n    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\n\n    function getWriteableValue(expression) {\n        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\n            return false;\n        var match = expression.match(javaScriptAssignmentTarget);\n        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\n    }\n\n    // The following regular expressions will be used to split an object-literal string into tokens\n\n        // These two match strings, either with double quotes or single quotes\n    var stringDouble = '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"',\n        stringSingle = \"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\",\n        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\n        // as a regular expression (this is handled by the parsing loop below).\n        stringRegexp = '/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*',\n        // These characters have special meaning to the parser and must not appear in the middle of a\n        // token, except as part of a string.\n        specials = ',\"\\'{}()/:[\\\\]',\n        // Match text (at least two characters) that does not contain any of the above special characters,\n        // although some of the special characters are allowed to start it (all but the colon and comma).\n        // The text can contain spaces, but leading or trailing spaces are skipped.\n        everyThingElse = '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\n        // Match any non-space character not matched already. This will match colons and commas, since they're\n        // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\n        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\n        oneNotSpace = '[^\\\\s]',\n\n        // Create the actual regular expression by or-ing the above strings. The order is important.\n        bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),\n\n        // Match end of previous token to determine whether a slash is a division or regex.\n        divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\n        keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\n\n    function parseObjectLiteral(objectLiteralString) {\n        // Trim leading and trailing spaces from the string\n        var str = ko.utils.stringTrim(objectLiteralString);\n\n        // Trim braces '{' surrounding the whole object literal\n        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\n\n        // Split into tokens\n        var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\n\n        if (toks) {\n            // Append a comma so that we don't need a separate code block to deal with the last item\n            toks.push(',');\n\n            for (var i = 0, tok; tok = toks[i]; ++i) {\n                var c = tok.charCodeAt(0);\n                // A comma signals the end of a key/value pair if depth is zero\n                if (c === 44) { // \",\"\n                    if (depth <= 0) {\n                        result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\n                        key = depth = 0;\n                        values = [];\n                        continue;\n                    }\n                // Simply skip the colon that separates the name and value\n                } else if (c === 58) { // \":\"\n                    if (!depth && !key && values.length === 1) {\n                        key = values.pop();\n                        continue;\n                    }\n                // A set of slashes is initially matched as a regular expression, but could be division\n                } else if (c === 47 && i && tok.length > 1) {  // \"/\"\n                    // Look at the end of the previous token to determine if the slash is actually division\n                    var match = toks[i-1].match(divisionLookBehind);\n                    if (match && !keywordRegexLookBehind[match[0]]) {\n                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\n                        str = str.substr(str.indexOf(tok) + 1);\n                        toks = str.match(bindingToken);\n                        toks.push(',');\n                        i = -1;\n                        // Continue with just the slash\n                        tok = '/';\n                    }\n                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\n                } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\n                    ++depth;\n                } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\n                    --depth;\n                // The key will be the first token; if it's a string, trim the quotes\n                } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\n                    tok = tok.slice(1, -1);\n                }\n                values.push(tok);\n            }\n        }\n        return result;\n    }\n\n    // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\n    var twoWayBindings = {};\n\n    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\n        bindingOptions = bindingOptions || {};\n\n        function processKeyValue(key, val) {\n            var writableVal;\n            function callPreprocessHook(obj) {\n                return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\n            }\n            if (!bindingParams) {\n                if (!callPreprocessHook(ko['getBindingHandler'](key)))\n                    return;\n\n                if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\n                    // For two-way bindings, provide a write method in case the value\n                    // isn't a writable observable.\n                    propertyAccessorResultStrings.push(\"'\" + key + \"':function(_z){\" + writableVal + \"=_z}\");\n                }\n            }\n            // Values are wrapped in a function so that each value can be accessed independently\n            if (makeValueAccessors) {\n                val = 'function(){return ' + val + ' }';\n            }\n            resultStrings.push(\"'\" + key + \"':\" + val);\n        }\n\n        var resultStrings = [],\n            propertyAccessorResultStrings = [],\n            makeValueAccessors = bindingOptions['valueAccessors'],\n            bindingParams = bindingOptions['bindingParams'],\n            keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\n                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\n\n        ko.utils.arrayForEach(keyValueArray, function(keyValue) {\n            processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\n        });\n\n        if (propertyAccessorResultStrings.length)\n            processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\n\n        return resultStrings.join(\",\");\n    }\n\n    return {\n        bindingRewriteValidators: [],\n\n        twoWayBindings: twoWayBindings,\n\n        parseObjectLiteral: parseObjectLiteral,\n\n        preProcessBindings: preProcessBindings,\n\n        keyValueArrayContainsKey: function(keyValueArray, key) {\n            for (var i = 0; i < keyValueArray.length; i++)\n                if (keyValueArray[i]['key'] == key)\n                    return true;\n            return false;\n        },\n\n        // Internal, private KO utility for updating model properties from within bindings\n        // property:            If the property being updated is (or might be) an observable, pass it here\n        //                      If it turns out to be a writable observable, it will be written to directly\n        // allBindings:         An object with a get method to retrieve bindings in the current execution context.\n        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\n        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\n        // value:               The value to be written\n        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\n        //                      it is !== existing value on that writable observable\n        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\n            if (!property || !ko.isObservable(property)) {\n                var propWriters = allBindings.get('_ko_property_writers');\n                if (propWriters && propWriters[key])\n                    propWriters[key](value);\n            } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\n                property(value);\n            }\n        }\n    };\n})();\n\nko.exportSymbol('expressionRewriting', ko.expressionRewriting);\nko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\nko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\nko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\n\n// Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\n// all bindings could use an official 'property writer' API without needing to declare that they might). However,\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\n// as an internal implementation detail in the short term.\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\nko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\n\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\nko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\nko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\n(function() {\n    // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\n    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\n    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\n    // of that virtual hierarchy\n    //\n    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\n    // without having to scatter special cases all over the binding and templating code.\n\n    // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\n    // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\n    // So, use node.text where available, and node.nodeValue elsewhere\n    var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\n\n    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\n    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\n    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\n\n    function isStartComment(node) {\n        return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\n    }\n\n    function isEndComment(node) {\n        return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\n    }\n\n    function getVirtualChildren(startComment, allowUnbalanced) {\n        var currentNode = startComment;\n        var depth = 1;\n        var children = [];\n        while (currentNode = currentNode.nextSibling) {\n            if (isEndComment(currentNode)) {\n                depth--;\n                if (depth === 0)\n                    return children;\n            }\n\n            children.push(currentNode);\n\n            if (isStartComment(currentNode))\n                depth++;\n        }\n        if (!allowUnbalanced)\n            throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\n        return null;\n    }\n\n    function getMatchingEndComment(startComment, allowUnbalanced) {\n        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\n        if (allVirtualChildren) {\n            if (allVirtualChildren.length > 0)\n                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\n            return startComment.nextSibling;\n        } else\n            return null; // Must have no matching end comment, and allowUnbalanced is true\n    }\n\n    function getUnbalancedChildTags(node) {\n        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\n        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\n        var childNode = node.firstChild, captureRemaining = null;\n        if (childNode) {\n            do {\n                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\n                    captureRemaining.push(childNode);\n                else if (isStartComment(childNode)) {\n                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\n                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\n                        childNode = matchingEndComment;\n                    else\n                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\n                } else if (isEndComment(childNode)) {\n                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\n                }\n            } while (childNode = childNode.nextSibling);\n        }\n        return captureRemaining;\n    }\n\n    ko.virtualElements = {\n        allowedBindings: {},\n\n        childNodes: function(node) {\n            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\n        },\n\n        emptyNode: function(node) {\n            if (!isStartComment(node))\n                ko.utils.emptyDomNode(node);\n            else {\n                var virtualChildren = ko.virtualElements.childNodes(node);\n                for (var i = 0, j = virtualChildren.length; i < j; i++)\n                    ko.removeNode(virtualChildren[i]);\n            }\n        },\n\n        setDomNodeChildren: function(node, childNodes) {\n            if (!isStartComment(node))\n                ko.utils.setDomNodeChildren(node, childNodes);\n            else {\n                ko.virtualElements.emptyNode(node);\n                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\n                for (var i = 0, j = childNodes.length; i < j; i++)\n                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\n            }\n        },\n\n        prepend: function(containerNode, nodeToPrepend) {\n            if (!isStartComment(containerNode)) {\n                if (containerNode.firstChild)\n                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\n                else\n                    containerNode.appendChild(nodeToPrepend);\n            } else {\n                // Start comments must always have a parent and at least one following sibling (the end comment)\n                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\n            }\n        },\n\n        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\n            if (!insertAfterNode) {\n                ko.virtualElements.prepend(containerNode, nodeToInsert);\n            } else if (!isStartComment(containerNode)) {\n                // Insert after insertion point\n                if (insertAfterNode.nextSibling)\n                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\n                else\n                    containerNode.appendChild(nodeToInsert);\n            } else {\n                // Children of start comments must always have a parent and at least one following sibling (the end comment)\n                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\n            }\n        },\n\n        firstChild: function(node) {\n            if (!isStartComment(node))\n                return node.firstChild;\n            if (!node.nextSibling || isEndComment(node.nextSibling))\n                return null;\n            return node.nextSibling;\n        },\n\n        nextSibling: function(node) {\n            if (isStartComment(node))\n                node = getMatchingEndComment(node);\n            if (node.nextSibling && isEndComment(node.nextSibling))\n                return null;\n            return node.nextSibling;\n        },\n\n        hasBindingValue: isStartComment,\n\n        virtualNodeBindingValue: function(node) {\n            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\n            return regexMatch ? regexMatch[1] : null;\n        },\n\n        normaliseVirtualElementDomStructure: function(elementVerified) {\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/155\n            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\n            // that are direct descendants of <ul> into the preceding <li>)\n            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\n                return;\n\n            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\n            // must be intended to appear *after* that child, so move them there.\n            var childNode = elementVerified.firstChild;\n            if (childNode) {\n                do {\n                    if (childNode.nodeType === 1) {\n                        var unbalancedTags = getUnbalancedChildTags(childNode);\n                        if (unbalancedTags) {\n                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\n                            var nodeToInsertBefore = childNode.nextSibling;\n                            for (var i = 0; i < unbalancedTags.length; i++) {\n                                if (nodeToInsertBefore)\n                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\n                                else\n                                    elementVerified.appendChild(unbalancedTags[i]);\n                            }\n                        }\n                    }\n                } while (childNode = childNode.nextSibling);\n            }\n        }\n    };\n})();\nko.exportSymbol('virtualElements', ko.virtualElements);\nko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\nko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\n//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\nko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\n//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\nko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\nko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\n(function() {\n    var defaultBindingAttributeName = \"data-bind\";\n\n    ko.bindingProvider = function() {\n        this.bindingCache = {};\n    };\n\n    ko.utils.extend(ko.bindingProvider.prototype, {\n        'nodeHasBindings': function(node) {\n            switch (node.nodeType) {\n                case 1: // Element\n                    return node.getAttribute(defaultBindingAttributeName) != null\n                        || ko.components['getComponentNameForNode'](node);\n                case 8: // Comment node\n                    return ko.virtualElements.hasBindingValue(node);\n                default: return false;\n            }\n        },\n\n        'getBindings': function(node, bindingContext) {\n            var bindingsString = this['getBindingsString'](node, bindingContext),\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\n        },\n\n        'getBindingAccessors': function(node, bindingContext) {\n            var bindingsString = this['getBindingsString'](node, bindingContext),\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\n        },\n\n        // The following function is only used internally by this default provider.\n        // It's not part of the interface definition for a general binding provider.\n        'getBindingsString': function(node, bindingContext) {\n            switch (node.nodeType) {\n                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\n                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\n                default: return null;\n            }\n        },\n\n        // The following function is only used internally by this default provider.\n        // It's not part of the interface definition for a general binding provider.\n        'parseBindingsString': function(bindingsString, bindingContext, node, options) {\n            try {\n                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\n                return bindingFunction(bindingContext, node);\n            } catch (ex) {\n                ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\n                throw ex;\n            }\n        }\n    });\n\n    ko.bindingProvider['instance'] = new ko.bindingProvider();\n\n    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\n        var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\n        return cache[cacheKey]\n            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\n    }\n\n    function createBindingsStringEvaluator(bindingsString, options) {\n        // Build the source for a function that evaluates \"expression\"\n        // For each scope variable, add an extra level of \"with\" nesting\n        // Example result: with(sc1) { with(sc0) { return (expression) } }\n        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\n            functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\n        return new Function(\"$context\", \"$element\", functionBody);\n    }\n})();\n\nko.exportSymbol('bindingProvider', ko.bindingProvider);\n(function () {\n    ko.bindingHandlers = {};\n\n    // The following element types will not be recursed into during binding.\n    var bindingDoesNotRecurseIntoElementTypes = {\n        // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\n        // because it's unexpected and a potential XSS issue.\n        // Also bindings should not operate on <template> elements since this breaks in Internet Explorer\n        // and because such elements' contents are always intended to be bound in a different context\n        // from where they appear in the document.\n        'script': true,\n        'textarea': true,\n        'template': true\n    };\n\n    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\n    ko['getBindingHandler'] = function(bindingKey) {\n        return ko.bindingHandlers[bindingKey];\n    };\n\n    // The ko.bindingContext constructor is only called directly to create the root context. For child\n    // contexts, use bindingContext.createChildContext or bindingContext.extend.\n    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, options) {\n\n        // The binding context object includes static properties for the current, parent, and root view models.\n        // If a view model is actually stored in an observable, the corresponding binding context object, and\n        // any child contexts, must be updated when the view model is changed.\n        function updateContext() {\n            // Most of the time, the context will directly get a view model object, but if a function is given,\n            // we call the function to retrieve the view model. If the function accesses any observables or returns\n            // an observable, the dependency is tracked, and those observables can later cause the binding\n            // context to be updated.\n            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\n                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\n\n            if (parentContext) {\n                // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\n                // parent context is updated, this context will also be updated.\n                if (parentContext._subscribable)\n                    parentContext._subscribable();\n\n                // Copy $root and any custom properties from the parent context\n                ko.utils.extend(self, parentContext);\n\n                // Because the above copy overwrites our own properties, we need to reset them.\n                self._subscribable = subscribable;\n            } else {\n                self['$parents'] = [];\n                self['$root'] = dataItem;\n\n                // Export 'ko' in the binding context so it will be available in bindings and templates\n                // even if 'ko' isn't exported as a global, such as when using an AMD loader.\n                // See https://github.com/SteveSanderson/knockout/issues/490\n                self['ko'] = ko;\n            }\n            self['$rawData'] = dataItemOrObservable;\n            self['$data'] = dataItem;\n            if (dataItemAlias)\n                self[dataItemAlias] = dataItem;\n\n            // The extendCallback function is provided when creating a child context or extending a context.\n            // It handles the specific actions needed to finish setting up the binding context. Actions in this\n            // function could also add dependencies to this binding context.\n            if (extendCallback)\n                extendCallback(self, parentContext, dataItem);\n\n            return self['$data'];\n        }\n        function disposeWhen() {\n            return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\n        }\n\n        var self = this,\n            isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor),\n            nodes,\n            subscribable;\n\n        if (options && options['exportDependencies']) {\n            // The \"exportDependencies\" option means that the calling code will track any dependencies and re-create\n            // the binding context when they change.\n            updateContext();\n        } else {\n            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\n\n            // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\n            // subscribed to any observables that were accessed in the process. If there is nothing to track, the\n            // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\n            // the context object.\n            if (subscribable.isActive()) {\n                self._subscribable = subscribable;\n\n                // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\n                subscribable['equalityComparer'] = null;\n\n                // We need to be able to dispose of this computed observable when it's no longer needed. This would be\n                // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\n                // we cannot assume that those nodes have any relation to each other. So instead we track any node that\n                // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\n\n                // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\n                nodes = [];\n                subscribable._addNode = function(node) {\n                    nodes.push(node);\n                    ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {\n                        ko.utils.arrayRemoveItem(nodes, node);\n                        if (!nodes.length) {\n                            subscribable.dispose();\n                            self._subscribable = subscribable = undefined;\n                        }\n                    });\n                };\n            }\n        }\n    }\n\n    // Extend the binding context hierarchy with a new view model object. If the parent context is watching\n    // any observables, the new child context will automatically get a dependency on the parent context.\n    // But this does not mean that the $data value of the child context will also get updated. If the child\n    // view model also depends on the parent view model, you must provide a function that returns the correct\n    // view model on each update.\n    ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback, options) {\n        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {\n            // Extend the context hierarchy by setting the appropriate pointers\n            self['$parentContext'] = parentContext;\n            self['$parent'] = parentContext['$data'];\n            self['$parents'] = (parentContext['$parents'] || []).slice(0);\n            self['$parents'].unshift(self['$parent']);\n            if (extendCallback)\n                extendCallback(self);\n        }, options);\n    };\n\n    // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\n    // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\n    // when an observable view model is updated.\n    ko.bindingContext.prototype['extend'] = function(properties) {\n        // If the parent context references an observable view model, \"_subscribable\" will always be the\n        // latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.\n        return new ko.bindingContext(this._subscribable || this['$data'], this, null, function(self, parentContext) {\n            // This \"child\" context doesn't directly track a parent observable view model,\n            // so we need to manually set the $rawData value to match the parent.\n            self['$rawData'] = parentContext['$rawData'];\n            ko.utils.extend(self, typeof(properties) == \"function\" ? properties() : properties);\n        });\n    };\n\n    ko.bindingContext.prototype.createStaticChildContext = function (dataItemOrAccessor, dataItemAlias) {\n        return this['createChildContext'](dataItemOrAccessor, dataItemAlias, null, { \"exportDependencies\": true });\n    };\n\n    // Returns the valueAccesor function for a binding value\n    function makeValueAccessor(value) {\n        return function() {\n            return value;\n        };\n    }\n\n    // Returns the value of a valueAccessor function\n    function evaluateValueAccessor(valueAccessor) {\n        return valueAccessor();\n    }\n\n    // Given a function that returns bindings, create and return a new object that contains\n    // binding value-accessors functions. Each accessor function calls the original function\n    // so that it always gets the latest value and all dependencies are captured. This is used\n    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\n    function makeAccessorsFromFunction(callback) {\n        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\n            return function() {\n                return callback()[key];\n            };\n        });\n    }\n\n    // Given a bindings function or object, create and return a new object that contains\n    // binding value-accessors functions. This is used by ko.applyBindingsToNode.\n    function makeBindingAccessors(bindings, context, node) {\n        if (typeof bindings === 'function') {\n            return makeAccessorsFromFunction(bindings.bind(null, context, node));\n        } else {\n            return ko.utils.objectMap(bindings, makeValueAccessor);\n        }\n    }\n\n    // This function is used if the binding provider doesn't include a getBindingAccessors function.\n    // It must be called with 'this' set to the provider instance.\n    function getBindingsAndMakeAccessors(node, context) {\n        return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\n    }\n\n    function validateThatBindingIsAllowedForVirtualElements(bindingName) {\n        var validator = ko.virtualElements.allowedBindings[bindingName];\n        if (!validator)\n            throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\n    }\n\n    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\n        var currentChild,\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\n            provider = ko.bindingProvider['instance'],\n            preprocessNode = provider['preprocessNode'];\n\n        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\n        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\n        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\n        // trigger insertion of <template> contents at that point in the document.\n        if (preprocessNode) {\n            while (currentChild = nextInQueue) {\n                nextInQueue = ko.virtualElements.nextSibling(currentChild);\n                preprocessNode.call(provider, currentChild);\n            }\n            // Reset nextInQueue for the next loop\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\n        }\n\n        while (currentChild = nextInQueue) {\n            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\n            nextInQueue = ko.virtualElements.nextSibling(currentChild);\n            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\n        }\n    }\n\n    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\n        var shouldBindDescendants = true;\n\n        // Perf optimisation: Apply bindings only if...\n        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)\n        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those\n        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\n        var isElement = (nodeVerified.nodeType === 1);\n        if (isElement) // Workaround IE <= 8 HTML parsing weirdness\n            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\n\n        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)\n                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)\n        if (shouldApplyBindings)\n            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];\n\n        if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\n            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\n            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\n            //    hence bindingContextsMayDifferFromDomParentElement is false\n            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may\n            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\n            //    hence bindingContextsMayDifferFromDomParentElement is true\n            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);\n        }\n    }\n\n    var boundElementDomDataKey = ko.utils.domData.nextKey();\n\n\n    function topologicalSortBindings(bindings) {\n        // Depth-first sort\n        var result = [],                // The list of key/handler pairs that we will return\n            bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\n            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\n        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\n            if (!bindingsConsidered[bindingKey]) {\n                var binding = ko['getBindingHandler'](bindingKey);\n                if (binding) {\n                    // First add dependencies (if any) of the current binding\n                    if (binding['after']) {\n                        cyclicDependencyStack.push(bindingKey);\n                        ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\n                            if (bindings[bindingDependencyKey]) {\n                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\n                                    throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\n                                } else {\n                                    pushBinding(bindingDependencyKey);\n                                }\n                            }\n                        });\n                        cyclicDependencyStack.length--;\n                    }\n                    // Next add the current binding\n                    result.push({ key: bindingKey, handler: binding });\n                }\n                bindingsConsidered[bindingKey] = true;\n            }\n        });\n\n        return result;\n    }\n\n    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\n        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\n        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\n        if (!sourceBindings) {\n            if (alreadyBound) {\n                throw Error(\"You cannot apply bindings multiple times to the same element.\");\n            }\n            ko.utils.domData.set(node, boundElementDomDataKey, true);\n        }\n\n        // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because\n        // we can easily recover it just by scanning up the node's ancestors in the DOM\n        // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)\n        if (!alreadyBound && bindingContextMayDifferFromDomParentElement)\n            ko.storedBindingContextForNode(node, bindingContext);\n\n        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\n        var bindings;\n        if (sourceBindings && typeof sourceBindings !== 'function') {\n            bindings = sourceBindings;\n        } else {\n            var provider = ko.bindingProvider['instance'],\n                getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\n\n            // Get the binding from the provider within a computed observable so that we can update the bindings whenever\n            // the binding context is updated or if the binding provider accesses observables.\n            var bindingsUpdater = ko.dependentObservable(\n                function() {\n                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\n                    // Register a dependency on the binding context to support observable view models.\n                    if (bindings && bindingContext._subscribable)\n                        bindingContext._subscribable();\n                    return bindings;\n                },\n                null, { disposeWhenNodeIsRemoved: node }\n            );\n\n            if (!bindings || !bindingsUpdater.isActive())\n                bindingsUpdater = null;\n        }\n\n        var bindingHandlerThatControlsDescendantBindings;\n        if (bindings) {\n            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\n            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\n            // the latest binding value and registers a dependency on the binding updater.\n            var getValueAccessor = bindingsUpdater\n                ? function(bindingKey) {\n                    return function() {\n                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\n                    };\n                } : function(bindingKey) {\n                    return bindings[bindingKey];\n                };\n\n            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\n            function allBindings() {\n                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\n            }\n            // The following is the 3.x allBindings API\n            allBindings['get'] = function(key) {\n                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\n            };\n            allBindings['has'] = function(key) {\n                return key in bindings;\n            };\n\n            // First put the bindings into the right order\n            var orderedBindings = topologicalSortBindings(bindings);\n\n            // Go through the sorted bindings, calling init and update for each\n            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\n                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\n                // so bindingKeyAndHandler.handler will always be nonnull.\n                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\n                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\n                    bindingKey = bindingKeyAndHandler.key;\n\n                if (node.nodeType === 8) {\n                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\n                }\n\n                try {\n                    // Run init, ignoring any dependencies\n                    if (typeof handlerInitFn == \"function\") {\n                        ko.dependencyDetection.ignore(function() {\n                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\n\n                            // If this binding handler claims to control descendant bindings, make a note of this\n                            if (initResult && initResult['controlsDescendantBindings']) {\n                                if (bindingHandlerThatControlsDescendantBindings !== undefined)\n                                    throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\n                                bindingHandlerThatControlsDescendantBindings = bindingKey;\n                            }\n                        });\n                    }\n\n                    // Run update in its own computed wrapper\n                    if (typeof handlerUpdateFn == \"function\") {\n                        ko.dependentObservable(\n                            function() {\n                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\n                            },\n                            null,\n                            { disposeWhenNodeIsRemoved: node }\n                        );\n                    }\n                } catch (ex) {\n                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\n                    throw ex;\n                }\n            });\n        }\n\n        return {\n            'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined\n        };\n    };\n\n    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\n    ko.storedBindingContextForNode = function (node, bindingContext) {\n        if (arguments.length == 2) {\n            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\n            if (bindingContext._subscribable)\n                bindingContext._subscribable._addNode(node);\n        } else {\n            return ko.utils.domData.get(node, storedBindingContextDomDataKey);\n        }\n    }\n\n    function getBindingContext(viewModelOrBindingContext) {\n        return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\n            ? viewModelOrBindingContext\n            : new ko.bindingContext(viewModelOrBindingContext);\n    }\n\n    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\n        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\n            ko.virtualElements.normaliseVirtualElementDomStructure(node);\n        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\n    };\n\n    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\n        var context = getBindingContext(viewModelOrBindingContext);\n        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\n    };\n\n    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\n        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\n            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\n    };\n\n    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\n        // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\n        if (!jQueryInstance && window['jQuery']) {\n            jQueryInstance = window['jQuery'];\n        }\n\n        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))\n            throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\n        rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\n\n        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\n    };\n\n    // Retrieving binding context from arbitrary nodes\n    ko.contextFor = function(node) {\n        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\n        switch (node.nodeType) {\n            case 1:\n            case 8:\n                var context = ko.storedBindingContextForNode(node);\n                if (context) return context;\n                if (node.parentNode) return ko.contextFor(node.parentNode);\n                break;\n        }\n        return undefined;\n    };\n    ko.dataFor = function(node) {\n        var context = ko.contextFor(node);\n        return context ? context['$data'] : undefined;\n    };\n\n    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\n    ko.exportSymbol('applyBindings', ko.applyBindings);\n    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\n    ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\n    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\n    ko.exportSymbol('contextFor', ko.contextFor);\n    ko.exportSymbol('dataFor', ko.dataFor);\n})();\n(function(undefined) {\n    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\n        loadedDefinitionsCache = {};    // Tracks component loads that have already completed\n\n    ko.components = {\n        get: function(componentName, callback) {\n            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\n            if (cachedDefinition) {\n                // It's already loaded and cached. Reuse the same definition object.\n                // Note that for API consistency, even cache hits complete asynchronously by default.\n                // You can bypass this by putting synchronous:true on your component config.\n                if (cachedDefinition.isSynchronousComponent) {\n                    ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\n                        callback(cachedDefinition.definition);\n                    });\n                } else {\n                    ko.tasks.schedule(function() { callback(cachedDefinition.definition); });\n                }\n            } else {\n                // Join the loading process that is already underway, or start a new one.\n                loadComponentAndNotify(componentName, callback);\n            }\n        },\n\n        clearCachedDefinition: function(componentName) {\n            delete loadedDefinitionsCache[componentName];\n        },\n\n        _getFirstResultFromLoaders: getFirstResultFromLoaders\n    };\n\n    function getObjectOwnProperty(obj, propName) {\n        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\n    }\n\n    function loadComponentAndNotify(componentName, callback) {\n        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\n            completedAsync;\n        if (!subscribable) {\n            // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\n            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\n            subscribable.subscribe(callback);\n\n            beginLoadingComponent(componentName, function(definition, config) {\n                var isSynchronousComponent = !!(config && config['synchronous']);\n                loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\n                delete loadingSubscribablesCache[componentName];\n\n                // For API consistency, all loads complete asynchronously. However we want to avoid\n                // adding an extra task schedule if it's unnecessary (i.e., the completion is already\n                // async).\n                //\n                // You can bypass the 'always asynchronous' feature by putting the synchronous:true\n                // flag on your component configuration when you register it.\n                if (completedAsync || isSynchronousComponent) {\n                    // Note that notifySubscribers ignores any dependencies read within the callback.\n                    // See comment in loaderRegistryBehaviors.js for reasoning\n                    subscribable['notifySubscribers'](definition);\n                } else {\n                    ko.tasks.schedule(function() {\n                        subscribable['notifySubscribers'](definition);\n                    });\n                }\n            });\n            completedAsync = true;\n        } else {\n            subscribable.subscribe(callback);\n        }\n    }\n\n    function beginLoadingComponent(componentName, callback) {\n        getFirstResultFromLoaders('getConfig', [componentName], function(config) {\n            if (config) {\n                // We have a config, so now load its definition\n                getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\n                    callback(definition, config);\n                });\n            } else {\n                // The component has no config - it's unknown to all the loaders.\n                // Note that this is not an error (e.g., a module loading error) - that would abort the\n                // process and this callback would not run. For this callback to run, all loaders must\n                // have confirmed they don't know about this component.\n                callback(null, null);\n            }\n        });\n    }\n\n    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\n        // On the first call in the stack, start with the full set of loaders\n        if (!candidateLoaders) {\n            candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\n        }\n\n        // Try the next candidate\n        var currentCandidateLoader = candidateLoaders.shift();\n        if (currentCandidateLoader) {\n            var methodInstance = currentCandidateLoader[methodName];\n            if (methodInstance) {\n                var wasAborted = false,\n                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\n                        if (wasAborted) {\n                            callback(null);\n                        } else if (result !== null) {\n                            // This candidate returned a value. Use it.\n                            callback(result);\n                        } else {\n                            // Try the next candidate\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\n                        }\n                    }));\n\n                // Currently, loaders may not return anything synchronously. This leaves open the possibility\n                // that we'll extend the API to support synchronous return values in the future. It won't be\n                // a breaking change, because currently no loader is allowed to return anything except undefined.\n                if (synchronousReturnValue !== undefined) {\n                    wasAborted = true;\n\n                    // Method to suppress exceptions will remain undocumented. This is only to keep\n                    // KO's specs running tidily, since we can observe the loading got aborted without\n                    // having exceptions cluttering up the console too.\n                    if (!currentCandidateLoader['suppressLoaderExceptions']) {\n                        throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\n                    }\n                }\n            } else {\n                // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\n                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\n            }\n        } else {\n            // No candidates returned a value\n            callback(null);\n        }\n    }\n\n    // Reference the loaders via string name so it's possible for developers\n    // to replace the whole array by assigning to ko.components.loaders\n    ko.components['loaders'] = [];\n\n    ko.exportSymbol('components', ko.components);\n    ko.exportSymbol('components.get', ko.components.get);\n    ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\n})();\n(function(undefined) {\n\n    // The default loader is responsible for two things:\n    // 1. Maintaining the default in-memory registry of component configuration objects\n    //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\n    // 2. Answering requests for components by fetching configuration objects\n    //    from that default in-memory registry and resolving them into standard\n    //    component definition objects (of the form { createViewModel: ..., template: ... })\n    // Custom loaders may override either of these facilities, i.e.,\n    // 1. To supply configuration objects from some other source (e.g., conventions)\n    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\n\n    var defaultConfigRegistry = {};\n\n    ko.components.register = function(componentName, config) {\n        if (!config) {\n            throw new Error('Invalid configuration for ' + componentName);\n        }\n\n        if (ko.components.isRegistered(componentName)) {\n            throw new Error('Component ' + componentName + ' is already registered');\n        }\n\n        defaultConfigRegistry[componentName] = config;\n    };\n\n    ko.components.isRegistered = function(componentName) {\n        return defaultConfigRegistry.hasOwnProperty(componentName);\n    };\n\n    ko.components.unregister = function(componentName) {\n        delete defaultConfigRegistry[componentName];\n        ko.components.clearCachedDefinition(componentName);\n    };\n\n    ko.components.defaultLoader = {\n        'getConfig': function(componentName, callback) {\n            var result = defaultConfigRegistry.hasOwnProperty(componentName)\n                ? defaultConfigRegistry[componentName]\n                : null;\n            callback(result);\n        },\n\n        'loadComponent': function(componentName, config, callback) {\n            var errorCallback = makeErrorCallback(componentName);\n            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\n                resolveConfig(componentName, errorCallback, loadedConfig, callback);\n            });\n        },\n\n        'loadTemplate': function(componentName, templateConfig, callback) {\n            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\n        },\n\n        'loadViewModel': function(componentName, viewModelConfig, callback) {\n            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\n        }\n    };\n\n    var createViewModelKey = 'createViewModel';\n\n    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\n    // into the standard component definition format:\n    //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\n    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\n    // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\n    // so this is implemented manually below.\n    function resolveConfig(componentName, errorCallback, config, callback) {\n        var result = {},\n            makeCallBackWhenZero = 2,\n            tryIssueCallback = function() {\n                if (--makeCallBackWhenZero === 0) {\n                    callback(result);\n                }\n            },\n            templateConfig = config['template'],\n            viewModelConfig = config['viewModel'];\n\n        if (templateConfig) {\n            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\n                ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\n                    result['template'] = resolvedTemplate;\n                    tryIssueCallback();\n                });\n            });\n        } else {\n            tryIssueCallback();\n        }\n\n        if (viewModelConfig) {\n            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\n                ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\n                    result[createViewModelKey] = resolvedViewModel;\n                    tryIssueCallback();\n                });\n            });\n        } else {\n            tryIssueCallback();\n        }\n    }\n\n    function resolveTemplate(errorCallback, templateConfig, callback) {\n        if (typeof templateConfig === 'string') {\n            // Markup - parse it\n            callback(ko.utils.parseHtmlFragment(templateConfig));\n        } else if (templateConfig instanceof Array) {\n            // Assume already an array of DOM nodes - pass through unchanged\n            callback(templateConfig);\n        } else if (isDocumentFragment(templateConfig)) {\n            // Document fragment - use its child nodes\n            callback(ko.utils.makeArray(templateConfig.childNodes));\n        } else if (templateConfig['element']) {\n            var element = templateConfig['element'];\n            if (isDomElement(element)) {\n                // Element instance - copy its child nodes\n                callback(cloneNodesFromTemplateSourceElement(element));\n            } else if (typeof element === 'string') {\n                // Element ID - find it, then copy its child nodes\n                var elemInstance = document.getElementById(element);\n                if (elemInstance) {\n                    callback(cloneNodesFromTemplateSourceElement(elemInstance));\n                } else {\n                    errorCallback('Cannot find element with ID ' + element);\n                }\n            } else {\n                errorCallback('Unknown element type: ' + element);\n            }\n        } else {\n            errorCallback('Unknown template value: ' + templateConfig);\n        }\n    }\n\n    function resolveViewModel(errorCallback, viewModelConfig, callback) {\n        if (typeof viewModelConfig === 'function') {\n            // Constructor - convert to standard factory function format\n            // By design, this does *not* supply componentInfo to the constructor, as the intent is that\n            // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\n            // be used in factory functions, not viewmodel constructors.\n            callback(function (params /*, componentInfo */) {\n                return new viewModelConfig(params);\n            });\n        } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\n            // Already a factory function - use it as-is\n            callback(viewModelConfig[createViewModelKey]);\n        } else if ('instance' in viewModelConfig) {\n            // Fixed object instance - promote to createViewModel format for API consistency\n            var fixedInstance = viewModelConfig['instance'];\n            callback(function (params, componentInfo) {\n                return fixedInstance;\n            });\n        } else if ('viewModel' in viewModelConfig) {\n            // Resolved AMD module whose value is of the form { viewModel: ... }\n            resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\n        } else {\n            errorCallback('Unknown viewModel value: ' + viewModelConfig);\n        }\n    }\n\n    function cloneNodesFromTemplateSourceElement(elemInstance) {\n        switch (ko.utils.tagNameLower(elemInstance)) {\n            case 'script':\n                return ko.utils.parseHtmlFragment(elemInstance.text);\n            case 'textarea':\n                return ko.utils.parseHtmlFragment(elemInstance.value);\n            case 'template':\n                // For browsers with proper <template> element support (i.e., where the .content property\n                // gives a document fragment), use that document fragment.\n                if (isDocumentFragment(elemInstance.content)) {\n                    return ko.utils.cloneNodes(elemInstance.content.childNodes);\n                }\n        }\n\n        // Regular elements such as <div>, and <template> elements on old browsers that don't really\n        // understand <template> and just treat it as a regular container\n        return ko.utils.cloneNodes(elemInstance.childNodes);\n    }\n\n    function isDomElement(obj) {\n        if (window['HTMLElement']) {\n            return obj instanceof HTMLElement;\n        } else {\n            return obj && obj.tagName && obj.nodeType === 1;\n        }\n    }\n\n    function isDocumentFragment(obj) {\n        if (window['DocumentFragment']) {\n            return obj instanceof DocumentFragment;\n        } else {\n            return obj && obj.nodeType === 11;\n        }\n    }\n\n    function possiblyGetConfigFromAmd(errorCallback, config, callback) {\n        if (typeof config['require'] === 'string') {\n            // The config is the value of an AMD module\n            if (amdRequire || window['require']) {\n                (amdRequire || window['require'])([config['require']], callback);\n            } else {\n                errorCallback('Uses require, but no AMD loader is present');\n            }\n        } else {\n            callback(config);\n        }\n    }\n\n    function makeErrorCallback(componentName) {\n        return function (message) {\n            throw new Error('Component \\'' + componentName + '\\': ' + message);\n        };\n    }\n\n    ko.exportSymbol('components.register', ko.components.register);\n    ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\n    ko.exportSymbol('components.unregister', ko.components.unregister);\n\n    // Expose the default loader so that developers can directly ask it for configuration\n    // or to resolve configuration\n    ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\n\n    // By default, the default loader is the only registered component loader\n    ko.components['loaders'].push(ko.components.defaultLoader);\n\n    // Privately expose the underlying config registry for use in old-IE shim\n    ko.components._allRegisteredComponents = defaultConfigRegistry;\n})();\n(function (undefined) {\n    // Overridable API for determining which component name applies to a given node. By overriding this,\n    // you can for example map specific tagNames to components that are not preregistered.\n    ko.components['getComponentNameForNode'] = function(node) {\n        var tagNameLower = ko.utils.tagNameLower(node);\n        if (ko.components.isRegistered(tagNameLower)) {\n            // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603\n            if (tagNameLower.indexOf('-') != -1 || ('' + node) == \"[object HTMLUnknownElement]\" || (ko.utils.ieVersion <= 8 && node.tagName === tagNameLower)) {\n                return tagNameLower;\n            }\n        }\n    };\n\n    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\n        // Determine if it's really a custom element matching a component\n        if (node.nodeType === 1) {\n            var componentName = ko.components['getComponentNameForNode'](node);\n            if (componentName) {\n                // It does represent a component, so add a component binding for it\n                allBindings = allBindings || {};\n\n                if (allBindings['component']) {\n                    // Avoid silently overwriting some other 'component' binding that may already be on the element\n                    throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\n                }\n\n                var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\n\n                allBindings['component'] = valueAccessors\n                    ? function() { return componentBindingValue; }\n                    : componentBindingValue;\n            }\n        }\n\n        return allBindings;\n    }\n\n    var nativeBindingProviderInstance = new ko.bindingProvider();\n\n    function getComponentParamsFromCustomElement(elem, bindingContext) {\n        var paramsAttribute = elem.getAttribute('params');\n\n        if (paramsAttribute) {\n            var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\n                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\n                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\n                }),\n                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\n                    var paramValue = paramValueComputed.peek();\n                    // Does the evaluation of the parameter value unwrap any observables?\n                    if (!paramValueComputed.isActive()) {\n                        // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\n                        // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\n                        return paramValue;\n                    } else {\n                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\n                        // level of observability, and any inner (resulting model value) level of observability.\n                        // This means the component doesn't have to worry about multiple unwrapping. If the value is a\n                        // writable observable, the computed will also be writable and pass the value on to the observable.\n                        return ko.computed({\n                            'read': function() {\n                                return ko.utils.unwrapObservable(paramValueComputed());\n                            },\n                            'write': ko.isWriteableObservable(paramValue) && function(value) {\n                                paramValueComputed()(value);\n                            },\n                            disposeWhenNodeIsRemoved: elem\n                        });\n                    }\n                });\n\n            // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\n            // This is in case the developer wants to react to outer (binding) observability separately from inner\n            // (model value) observability, or in case the model value observable has subobservables.\n            if (!result.hasOwnProperty('$raw')) {\n                result['$raw'] = rawParamComputedValues;\n            }\n\n            return result;\n        } else {\n            // For consistency, absence of a \"params\" attribute is treated the same as the presence of\n            // any empty one. Otherwise component viewmodels need special code to check whether or not\n            // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\n            return { '$raw': {} };\n        }\n    }\n\n    // --------------------------------------------------------------------------------\n    // Compatibility code for older (pre-HTML5) IE browsers\n\n    if (ko.utils.ieVersion < 9) {\n        // Whenever you preregister a component, enable it as a custom element in the current document\n        ko.components['register'] = (function(originalFunction) {\n            return function(componentName) {\n                document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\n                return originalFunction.apply(this, arguments);\n            }\n        })(ko.components['register']);\n\n        // Whenever you create a document fragment, enable all preregistered component names as custom elements\n        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\n        document.createDocumentFragment = (function(originalFunction) {\n            return function() {\n                var newDocFrag = originalFunction(),\n                    allComponents = ko.components._allRegisteredComponents;\n                for (var componentName in allComponents) {\n                    if (allComponents.hasOwnProperty(componentName)) {\n                        newDocFrag.createElement(componentName);\n                    }\n                }\n                return newDocFrag;\n            };\n        })(document.createDocumentFragment);\n    }\n})();(function(undefined) {\n\n    var componentLoadingOperationUniqueId = 0;\n\n    ko.bindingHandlers['component'] = {\n        'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\n            var currentViewModel,\n                currentLoadingOperationId,\n                disposeAssociatedComponentViewModel = function () {\n                    var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\n                    if (typeof currentViewModelDispose === 'function') {\n                        currentViewModelDispose.call(currentViewModel);\n                    }\n                    currentViewModel = null;\n                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\n                    currentLoadingOperationId = null;\n                },\n                originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\n\n            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\n\n            ko.computed(function () {\n                var value = ko.utils.unwrapObservable(valueAccessor()),\n                    componentName, componentParams;\n\n                if (typeof value === 'string') {\n                    componentName = value;\n                } else {\n                    componentName = ko.utils.unwrapObservable(value['name']);\n                    componentParams = ko.utils.unwrapObservable(value['params']);\n                }\n\n                if (!componentName) {\n                    throw new Error('No component name specified');\n                }\n\n                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\n                ko.components.get(componentName, function(componentDefinition) {\n                    // If this is not the current load operation for this element, ignore it.\n                    if (currentLoadingOperationId !== loadingOperationId) {\n                        return;\n                    }\n\n                    // Clean up previous state\n                    disposeAssociatedComponentViewModel();\n\n                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\n                    if (!componentDefinition) {\n                        throw new Error('Unknown component \\'' + componentName + '\\'');\n                    }\n                    cloneTemplateIntoElement(componentName, componentDefinition, element);\n                    var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),\n                        childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {\n                            ctx['$component'] = componentViewModel;\n                            ctx['$componentTemplateNodes'] = originalChildNodes;\n                        });\n                    currentViewModel = componentViewModel;\n                    ko.applyBindingsToDescendants(childBindingContext, element);\n                });\n            }, null, { disposeWhenNodeIsRemoved: element });\n\n            return { 'controlsDescendantBindings': true };\n        }\n    };\n\n    ko.virtualElements.allowedBindings['component'] = true;\n\n    function cloneTemplateIntoElement(componentName, componentDefinition, element) {\n        var template = componentDefinition['template'];\n        if (!template) {\n            throw new Error('Component \\'' + componentName + '\\' has no template');\n        }\n\n        var clonedNodesArray = ko.utils.cloneNodes(template);\n        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\n    }\n\n    function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {\n        var componentViewModelFactory = componentDefinition['createViewModel'];\n        return componentViewModelFactory\n            ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })\n            : componentParams; // Template-only component\n    }\n\n})();\nvar attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\nko.bindingHandlers['attr'] = {\n    'update': function(element, valueAccessor, allBindings) {\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\n            attrValue = ko.utils.unwrapObservable(attrValue);\n\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\n            if (toRemove)\n                element.removeAttribute(attrName);\n\n            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\n            // but instead of figuring out the mode, we'll just set the attribute through the Javascript\n            // property for IE <= 8.\n            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\n                attrName = attrHtmlToJavascriptMap[attrName];\n                if (toRemove)\n                    element.removeAttribute(attrName);\n                else\n                    element[attrName] = attrValue;\n            } else if (!toRemove) {\n                element.setAttribute(attrName, attrValue.toString());\n            }\n\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\n            // entirely, and there's no strong reason to allow for such casing in HTML.\n            if (attrName === \"name\") {\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\n            }\n        });\n    }\n};\n(function() {\n\nko.bindingHandlers['checked'] = {\n    'after': ['value', 'attr'],\n    'init': function (element, valueAccessor, allBindings) {\n        var checkedValue = ko.pureComputed(function() {\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\n            if (allBindings['has']('checkedValue')) {\n                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\n            } else if (allBindings['has']('value')) {\n                return ko.utils.unwrapObservable(allBindings.get('value'));\n            }\n\n            return element.value;\n        });\n\n        function updateModel() {\n            // This updates the model value from the view value.\n            // It runs in response to DOM events (click) and changes in checkedValue.\n            var isChecked = element.checked,\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\n\n            // When we're first setting up this computed, don't change any model state.\n            if (ko.computedContext.isInitial()) {\n                return;\n            }\n\n            // We can ignore unchecked radio buttons, because some other radio\n            // button will be getting checked, and that one can take care of updating state.\n            if (isRadio && !isChecked) {\n                return;\n            }\n\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\n            if (valueIsArray) {\n                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;\n                if (oldElemValue !== elemValue) {\n                    // When we're responding to the checkedValue changing, and the element is\n                    // currently checked, replace the old elem value with the new elem value\n                    // in the model array.\n                    if (isChecked) {\n                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);\n                        ko.utils.addOrRemoveItem(writableValue, oldElemValue, false);\n                    }\n\n                    oldElemValue = elemValue;\n                } else {\n                    // When we're responding to the user having checked/unchecked a checkbox,\n                    // add/remove the element value to the model array.\n                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\n                }\n                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\n                    modelValue(writableValue);\n                }\n            } else {\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\n            }\n        };\n\n        function updateView() {\n            // This updates the view value from the model value.\n            // It runs in response to changes in the bound (checked) value.\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n            if (valueIsArray) {\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\n            } else if (isCheckbox) {\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\n                element.checked = modelValue;\n            } else {\n                // For radio buttons, being checked means that the radio button's value corresponds to the model value\n                element.checked = (checkedValue() === modelValue);\n            }\n        };\n\n        var isCheckbox = element.type == \"checkbox\",\n            isRadio = element.type == \"radio\";\n\n        // Only bind to check boxes and radio buttons\n        if (!isCheckbox && !isRadio) {\n            return;\n        }\n\n        var rawValue = valueAccessor(),\n            valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),\n            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\n            oldElemValue = valueIsArray ? checkedValue() : undefined,\n            useCheckedValue = isRadio || valueIsArray;\n\n        // IE 6 won't allow radio buttons to be selected unless they have a name\n        if (isRadio && !element.name)\n            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\n\n        // Set up two computeds to update the binding:\n\n        // The first responds to changes in the checkedValue value and to element clicks\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\n\n        // The second responds to changes in the model value (the one associated with the checked binding)\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n\n        rawValue = undefined;\n    }\n};\nko.expressionRewriting.twoWayBindings['checked'] = true;\n\nko.bindingHandlers['checkedValue'] = {\n    'update': function (element, valueAccessor) {\n        element.value = ko.utils.unwrapObservable(valueAccessor());\n    }\n};\n\n})();var classesWrittenByBindingKey = '__ko__cssValue';\nko.bindingHandlers['css'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor());\n        if (value !== null && typeof value == \"object\") {\n            ko.utils.objectForEach(value, function(className, shouldHaveClass) {\n                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\n                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\n            });\n        } else {\n            value = ko.utils.stringTrim(String(value || '')); // Make sure we don't try to store or set a non-string value\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\n            element[classesWrittenByBindingKey] = value;\n            ko.utils.toggleDomNodeCssClass(element, value, true);\n        }\n    }\n};\nko.bindingHandlers['enable'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor());\n        if (value && element.disabled)\n            element.removeAttribute(\"disabled\");\n        else if ((!value) && (!element.disabled))\n            element.disabled = true;\n    }\n};\n\nko.bindingHandlers['disable'] = {\n    'update': function (element, valueAccessor) {\n        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\n    }\n};\n// For certain common events (currently just 'click'), allow a simplified data-binding syntax\n// e.g. click:handler instead of the usual full-length event:{click:handler}\nfunction makeEventHandlerShortcut(eventName) {\n    ko.bindingHandlers[eventName] = {\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n            var newValueAccessor = function () {\n                var result = {};\n                result[eventName] = valueAccessor();\n                return result;\n            };\n            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\n        }\n    }\n}\n\nko.bindingHandlers['event'] = {\n    'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n        var eventsToHandle = valueAccessor() || {};\n        ko.utils.objectForEach(eventsToHandle, function(eventName) {\n            if (typeof eventName == \"string\") {\n                ko.utils.registerEventHandler(element, eventName, function (event) {\n                    var handlerReturnValue;\n                    var handlerFunction = valueAccessor()[eventName];\n                    if (!handlerFunction)\n                        return;\n\n                    try {\n                        // Take all the event args, and prefix with the viewmodel\n                        var argsForHandler = ko.utils.makeArray(arguments);\n                        viewModel = bindingContext['$data'];\n                        argsForHandler.unshift(viewModel);\n                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\n                    } finally {\n                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\n                            if (event.preventDefault)\n                                event.preventDefault();\n                            else\n                                event.returnValue = false;\n                        }\n                    }\n\n                    var bubble = allBindings.get(eventName + 'Bubble') !== false;\n                    if (!bubble) {\n                        event.cancelBubble = true;\n                        if (event.stopPropagation)\n                            event.stopPropagation();\n                    }\n                });\n            }\n        });\n    }\n};\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\nko.bindingHandlers['foreach'] = {\n    makeTemplateValueAccessor: function(valueAccessor) {\n        return function() {\n            var modelValue = valueAccessor(),\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\n\n            // If unwrappedValue is the array, pass in the wrapped value on its own\n            // The value will be unwrapped and tracked within the template binding\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\n                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\n\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\n            ko.utils.unwrapObservable(modelValue);\n            return {\n                'foreach': unwrappedValue['data'],\n                'as': unwrappedValue['as'],\n                'includeDestroyed': unwrappedValue['includeDestroyed'],\n                'afterAdd': unwrappedValue['afterAdd'],\n                'beforeRemove': unwrappedValue['beforeRemove'],\n                'afterRender': unwrappedValue['afterRender'],\n                'beforeMove': unwrappedValue['beforeMove'],\n                'afterMove': unwrappedValue['afterMove'],\n                'templateEngine': ko.nativeTemplateEngine.instance\n            };\n        };\n    },\n    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\n    },\n    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\n    }\n};\nko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\nko.virtualElements.allowedBindings['foreach'] = true;\nvar hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\nvar hasfocusLastValue = '__ko_hasfocusLastValue';\nko.bindingHandlers['hasfocus'] = {\n    'init': function(element, valueAccessor, allBindings) {\n        var handleElementFocusChange = function(isFocused) {\n            // Where possible, ignore which event was raised and determine focus state using activeElement,\n            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\n            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\n            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\n            // from calling 'blur()' on the element when it loses focus.\n            // Discussion at https://github.com/SteveSanderson/knockout/pull/352\n            element[hasfocusUpdatingProperty] = true;\n            var ownerDoc = element.ownerDocument;\n            if (\"activeElement\" in ownerDoc) {\n                var active;\n                try {\n                    active = ownerDoc.activeElement;\n                } catch(e) {\n                    // IE9 throws if you access activeElement during page load (see issue #703)\n                    active = ownerDoc.body;\n                }\n                isFocused = (active === element);\n            }\n            var modelValue = valueAccessor();\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\n\n            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\n            element[hasfocusLastValue] = isFocused;\n            element[hasfocusUpdatingProperty] = false;\n        };\n        var handleElementFocusIn = handleElementFocusChange.bind(null, true);\n        var handleElementFocusOut = handleElementFocusChange.bind(null, false);\n\n        ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\n        ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\n        ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\n        ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\n    },\n    'update': function(element, valueAccessor) {\n        var value = !!ko.utils.unwrapObservable(valueAccessor());\n\n        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\n            value ? element.focus() : element.blur();\n\n            // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).\n            // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current\n            // element was focused already.\n            if (!value && element[hasfocusLastValue]) {\n                element.ownerDocument.body.focus();\n            }\n\n            // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\n            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]);\n        }\n    }\n};\nko.expressionRewriting.twoWayBindings['hasfocus'] = true;\n\nko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\nko.expressionRewriting.twoWayBindings['hasFocus'] = true;\nko.bindingHandlers['html'] = {\n    'init': function() {\n        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\n        return { 'controlsDescendantBindings': true };\n    },\n    'update': function (element, valueAccessor) {\n        // setHtml will unwrap the value if needed\n        ko.utils.setHtml(element, valueAccessor());\n    }\n};\n// Makes a binding like with or if\nfunction makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\n    ko.bindingHandlers[bindingKey] = {\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n            var didDisplayOnLastUpdate,\n                savedNodes;\n            ko.computed(function() {\n                var rawValue = valueAccessor(),\n                    dataValue = ko.utils.unwrapObservable(rawValue),\n                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue\n                    isFirstRender = !savedNodes,\n                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);\n\n                if (needsRefresh) {\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\n                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\n                    }\n\n                    if (shouldDisplay) {\n                        if (!isFirstRender) {\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\n                        }\n                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, rawValue) : bindingContext, element);\n                    } else {\n                        ko.virtualElements.emptyNode(element);\n                    }\n\n                    didDisplayOnLastUpdate = shouldDisplay;\n                }\n            }, null, { disposeWhenNodeIsRemoved: element });\n            return { 'controlsDescendantBindings': true };\n        }\n    };\n    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\n    ko.virtualElements.allowedBindings[bindingKey] = true;\n}\n\n// Construct the actual binding handlers\nmakeWithIfBinding('if');\nmakeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\nmakeWithIfBinding('with', true /* isWith */, false /* isNot */,\n    function(bindingContext, dataValue) {\n        return bindingContext.createStaticChildContext(dataValue);\n    }\n);\nvar captionPlaceholder = {};\nko.bindingHandlers['options'] = {\n    'init': function(element) {\n        if (ko.utils.tagNameLower(element) !== \"select\")\n            throw new Error(\"options binding applies only to SELECT elements\");\n\n        // Remove all existing <option>s.\n        while (element.length > 0) {\n            element.remove(0);\n        }\n\n        // Ensures that the binding processor doesn't try to bind the options\n        return { 'controlsDescendantBindings': true };\n    },\n    'update': function (element, valueAccessor, allBindings) {\n        function selectedOptions() {\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\n        }\n\n        var selectWasPreviouslyEmpty = element.length == 0,\n            multiple = element.multiple,\n            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\n            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\n            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\n            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\n            arrayToDomNodeChildrenOptions = {},\n            captionValue,\n            filteredArray,\n            previousSelectedValues = [];\n\n        if (!valueAllowUnset) {\n            if (multiple) {\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\n            } else if (element.selectedIndex >= 0) {\n                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\n            }\n        }\n\n        if (unwrappedArray) {\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\n                unwrappedArray = [unwrappedArray];\n\n            // Filter out any entries marked as destroyed\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\n            });\n\n            // If caption is included, add it to the array\n            if (allBindings['has']('optionsCaption')) {\n                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\n                // If caption value is null or undefined, don't show a caption\n                if (captionValue !== null && captionValue !== undefined) {\n                    filteredArray.unshift(captionPlaceholder);\n                }\n            }\n        } else {\n            // If a falsy value is provided (e.g. null), we'll simply empty the select element\n        }\n\n        function applyToObject(object, predicate, defaultValue) {\n            var predicateType = typeof predicate;\n            if (predicateType == \"function\")    // Given a function; run it against the data value\n                return predicate(object);\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\n                return object[predicate];\n            else                                // Given no optionsText arg; use the data value itself\n                return defaultValue;\n        }\n\n        // The following functions can run at two different times:\n        // The first is when the whole array is being updated directly from this binding handler.\n        // The second is when an observable value for a specific array entry is updated.\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\n        var itemUpdate = false;\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\n            if (oldOptions.length) {\n                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\n                itemUpdate = true;\n            }\n            var option = element.ownerDocument.createElement(\"option\");\n            if (arrayEntry === captionPlaceholder) {\n                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\n                ko.selectExtensions.writeValue(option, undefined);\n            } else {\n                // Apply a value to the option element\n                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\n\n                // Apply some text to the option element\n                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\n                ko.utils.setTextContent(option, optionText);\n            }\n            return [option];\n        }\n\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\n        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\n        arrayToDomNodeChildrenOptions['beforeRemove'] =\n            function (option) {\n                element.removeChild(option);\n            };\n\n        function setSelectionCallback(arrayEntry, newOptions) {\n            if (itemUpdate && valueAllowUnset) {\n                // The model value is authoritative, so make sure its value is the one selected\n                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n            } else if (previousSelectedValues.length) {\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\n                // That's why we first added them without selection. Now it's time to set the selection.\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\n\n                // If this option was changed from being selected during a single-item update, notify the change\n                if (itemUpdate && !isSelected) {\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\n                }\n            }\n        }\n\n        var callback = setSelectionCallback;\n        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\n            callback = function(arrayEntry, newOptions) {\n                setSelectionCallback(arrayEntry, newOptions);\n                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\n            }\n        }\n\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\n\n        ko.dependencyDetection.ignore(function () {\n            if (valueAllowUnset) {\n                // The model value is authoritative, so make sure its value is the one selected\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n            } else {\n                // Determine if the selection has changed as a result of updating the options list\n                var selectionChanged;\n                if (multiple) {\n                    // For a multiple-select box, compare the new selection count to the previous one\n                    // But if nothing was selected before, the selection can't have changed\n                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\n                } else {\n                    // For a single-select box, compare the current value to the previous value\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\n                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\n                        : (previousSelectedValues.length || element.selectedIndex >= 0);\n                }\n\n                // Ensure consistency between model value and selected option.\n                // If the dropdown was changed so that selection is no longer the same,\n                // notify the value or selectedOptions binding.\n                if (selectionChanged) {\n                    ko.utils.triggerEvent(element, \"change\");\n                }\n            }\n        });\n\n        // Workaround for IE bug\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\n\n        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\n            element.scrollTop = previousScrollTop;\n    }\n};\nko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\nko.bindingHandlers['selectedOptions'] = {\n    'after': ['options', 'foreach'],\n    'init': function (element, valueAccessor, allBindings) {\n        ko.utils.registerEventHandler(element, \"change\", function () {\n            var value = valueAccessor(), valueToWrite = [];\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\n                if (node.selected)\n                    valueToWrite.push(ko.selectExtensions.readValue(node));\n            });\n            ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\n        });\n    },\n    'update': function (element, valueAccessor) {\n        if (ko.utils.tagNameLower(element) != \"select\")\n            throw new Error(\"values binding applies only to SELECT elements\");\n\n        var newValue = ko.utils.unwrapObservable(valueAccessor()),\n            previousScrollTop = element.scrollTop;\n\n        if (newValue && typeof newValue.length == \"number\") {\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\n                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\n                if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE\n                    ko.utils.setOptionNodeSelectionState(node, isSelected);\n                }\n            });\n        }\n\n        element.scrollTop = previousScrollTop;\n    }\n};\nko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\nko.bindingHandlers['style'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor() || {});\n        ko.utils.objectForEach(value, function(styleName, styleValue) {\n            styleValue = ko.utils.unwrapObservable(styleValue);\n\n            if (styleValue === null || styleValue === undefined || styleValue === false) {\n                // Empty string removes the value, whereas null/undefined have no effect\n                styleValue = \"\";\n            }\n\n            element.style[styleName] = styleValue;\n        });\n    }\n};\nko.bindingHandlers['submit'] = {\n    'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n        if (typeof valueAccessor() != \"function\")\n            throw new Error(\"The value for a submit binding must be a function\");\n        ko.utils.registerEventHandler(element, \"submit\", function (event) {\n            var handlerReturnValue;\n            var value = valueAccessor();\n            try { handlerReturnValue = value.call(bindingContext['$data'], element); }\n            finally {\n                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\n                    if (event.preventDefault)\n                        event.preventDefault();\n                    else\n                        event.returnValue = false;\n                }\n            }\n        });\n    }\n};\nko.bindingHandlers['text'] = {\n    'init': function() {\n        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\n        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\n        return { 'controlsDescendantBindings': true };\n    },\n    'update': function (element, valueAccessor) {\n        ko.utils.setTextContent(element, valueAccessor());\n    }\n};\nko.virtualElements.allowedBindings['text'] = true;\n(function () {\n\nif (window && window.navigator) {\n    var parseVersion = function (matches) {\n        if (matches) {\n            return parseFloat(matches[1]);\n        }\n    };\n\n    // Detect various browser versions because some old versions don't fully support the 'input' event\n    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\n        userAgent = window.navigator.userAgent,\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\n}\n\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\n// But it does fire the 'selectionchange' event on many of those, presumably because the\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\n// fired at the document level only and doesn't directly indicate which element changed. We\n// set up just one event handler for the document and use 'activeElement' to determine which\n// element was changed.\nif (ko.utils.ieVersion < 10) {\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\n    var selectionChangeHandler = function(event) {\n        var target = this.activeElement,\n            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\n        if (handler) {\n            handler(event);\n        }\n    };\n    var registerForSelectionChangeEvent = function (element, handler) {\n        var ownerDoc = element.ownerDocument;\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\n            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\n        }\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\n    };\n}\n\nko.bindingHandlers['textInput'] = {\n    'init': function (element, valueAccessor, allBindings) {\n\n        var previousElementValue = element.value,\n            timeoutHandle,\n            elementValueBeforeEvent;\n\n        var updateModel = function (event) {\n            clearTimeout(timeoutHandle);\n            elementValueBeforeEvent = timeoutHandle = undefined;\n\n            var elementValue = element.value;\n            if (previousElementValue !== elementValue) {\n                // Provide a way for tests to know exactly which event was processed\n                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\n                previousElementValue = elementValue;\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\n            }\n        };\n\n        var deferUpdateModel = function (event) {\n            if (!timeoutHandle) {\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\n                // event firing and the updateModel function running. This allows us to ignore model\n                // updates that are from the previous state of the element, usually due to techniques\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\n                elementValueBeforeEvent = element.value;\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\n                timeoutHandle = ko.utils.setTimeout(handler, 4);\n            }\n        };\n\n        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\n        // so we'll make sure all updates are asynchronous\n        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel;\n\n        var updateView = function () {\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n            if (modelValue === null || modelValue === undefined) {\n                modelValue = '';\n            }\n\n            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\n                ko.utils.setTimeout(updateView, 4);\n                return;\n            }\n\n            // Update the element only if the element and model are different. On some browsers, updating the value\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\n            if (element.value !== modelValue) {\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\n                element.value = modelValue;\n            }\n        };\n\n        var onEvent = function (event, handler) {\n            ko.utils.registerEventHandler(element, event, handler);\n        };\n\n        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\n            // Provide a way for tests to specify exactly which events are bound\n            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\n                if (eventName.slice(0,5) == 'after') {\n                    onEvent(eventName.slice(5), deferUpdateModel);\n                } else {\n                    onEvent(eventName, updateModel);\n                }\n            });\n        } else {\n            if (ko.utils.ieVersion < 10) {\n                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\n                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\n                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\n                // when using autocomplete, we'll use 'propertychange' for it also.\n                onEvent('propertychange', function(event) {\n                    if (event.propertyName === 'value') {\n                        ieUpdateModel(event);\n                    }\n                });\n\n                if (ko.utils.ieVersion == 8) {\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\n                    // events too.\n                    onEvent('keyup', updateModel);      // A single keystoke\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\n                }\n                if (ko.utils.ieVersion >= 8) {\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\n                    // These are also needed in IE8 because of the bug described above.\n                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\n                    onEvent('dragend', deferUpdateModel);\n                }\n            } else {\n                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\n                // through the user interface.\n                onEvent('input', updateModel);\n\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\n                    onEvent('keydown', deferUpdateModel);\n                    onEvent('paste', deferUpdateModel);\n                    onEvent('cut', deferUpdateModel);\n                } else if (operaVersion < 11) {\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\n                    // We can try to catch some of those using 'keydown'.\n                    onEvent('keydown', deferUpdateModel);\n                } else if (firefoxVersion < 4.0) {\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\n                    onEvent('DOMAutoComplete', updateModel);\n\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\n                    onEvent('dragdrop', updateModel);       // <3.5\n                    onEvent('drop', updateModel);           // 3.5\n                }\n            }\n        }\n\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\n        onEvent('change', updateModel);\n\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n    }\n};\nko.expressionRewriting.twoWayBindings['textInput'] = true;\n\n// textinput is an alias for textInput\nko.bindingHandlers['textinput'] = {\n    // preprocess is the only way to set up a full alias\n    'preprocess': function (value, name, addBinding) {\n        addBinding('textInput', value);\n    }\n};\n\n})();ko.bindingHandlers['uniqueName'] = {\n    'init': function (element, valueAccessor) {\n        if (valueAccessor()) {\n            var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\n            ko.utils.setElementName(element, name);\n        }\n    }\n};\nko.bindingHandlers['uniqueName'].currentIndex = 0;\nko.bindingHandlers['value'] = {\n    'after': ['options', 'foreach'],\n    'init': function (element, valueAccessor, allBindings) {\n        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\n        if (element.tagName.toLowerCase() == \"input\" && (element.type == \"checkbox\" || element.type == \"radio\")) {\n            ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\n            return;\n        }\n\n        // Always catch \"change\" event; possibly other events too if asked\n        var eventsToCatch = [\"change\"];\n        var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\n        var propertyChangedFired = false;\n        var elementValueBeforeEvent = null;\n\n        if (requestedEventsToCatch) {\n            if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\n                requestedEventsToCatch = [requestedEventsToCatch];\n            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\n            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\n        }\n\n        var valueUpdateHandler = function() {\n            elementValueBeforeEvent = null;\n            propertyChangedFired = false;\n            var modelValue = valueAccessor();\n            var elementValue = ko.selectExtensions.readValue(element);\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\n        }\n\n        // Workaround for https://github.com/SteveSanderson/knockout/issues/122\n        // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\n        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == \"input\" && element.type == \"text\"\n                                       && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\n        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\n            ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\n            ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\n            ko.utils.registerEventHandler(element, \"blur\", function() {\n                if (propertyChangedFired) {\n                    valueUpdateHandler();\n                }\n            });\n        }\n\n        ko.utils.arrayForEach(eventsToCatch, function(eventName) {\n            // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\n            // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\n            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\n            var handler = valueUpdateHandler;\n            if (ko.utils.stringStartsWith(eventName, \"after\")) {\n                handler = function() {\n                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\n                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\n                    // at the earliest asynchronous opportunity. We store this temporary information so that\n                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\n                    // we can overwrite that model value change with the value the user just typed. Otherwise,\n                    // techniques like rateLimit can trigger model changes at critical moments that will\n                    // override the user's inputs, causing keystrokes to be lost.\n                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);\n                    ko.utils.setTimeout(valueUpdateHandler, 0);\n                };\n                eventName = eventName.substring(\"after\".length);\n            }\n            ko.utils.registerEventHandler(element, eventName, handler);\n        });\n\n        var updateFromModel = function () {\n            var newValue = ko.utils.unwrapObservable(valueAccessor());\n            var elementValue = ko.selectExtensions.readValue(element);\n\n            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\n                ko.utils.setTimeout(updateFromModel, 0);\n                return;\n            }\n\n            var valueHasChanged = (newValue !== elementValue);\n\n            if (valueHasChanged) {\n                if (ko.utils.tagNameLower(element) === \"select\") {\n                    var allowUnset = allBindings.get('valueAllowUnset');\n                    var applyValueAction = function () {\n                        ko.selectExtensions.writeValue(element, newValue, allowUnset);\n                    };\n                    applyValueAction();\n\n                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\n                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\n                        // because you're not allowed to have a model value that disagrees with a visible UI selection.\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\n                    } else {\n                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\n                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\n                        // to apply the value as well.\n                        ko.utils.setTimeout(applyValueAction, 0);\n                    }\n                } else {\n                    ko.selectExtensions.writeValue(element, newValue);\n                }\n            }\n        };\n\n        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\n    },\n    'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\n};\nko.expressionRewriting.twoWayBindings['value'] = true;\nko.bindingHandlers['visible'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor());\n        var isCurrentlyVisible = !(element.style.display == \"none\");\n        if (value && !isCurrentlyVisible)\n            element.style.display = \"\";\n        else if ((!value) && isCurrentlyVisible)\n            element.style.display = \"none\";\n    }\n};\n// 'click' is just a shorthand for the usual full-length event:{click:handler}\nmakeEventHandlerShortcut('click');\n// If you want to make a custom template engine,\n//\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\n// [2] Override 'renderTemplateSource', supplying a function with this signature:\n//\n//        function (templateSource, bindingContext, options) {\n//            // - templateSource.text() is the text of the template you should render\n//            // - bindingContext.$data is the data you should pass into the template\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\n//            //     and bindingContext.$root available in the template too\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\n//            // - templateDocument is the document object of the template\n//            //\n//            // Return value: an array of DOM nodes\n//        }\n//\n// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\n//\n//        function (script) {\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\n//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\n//        }\n//\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\n//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\n//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\n\nko.templateEngine = function () { };\n\nko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\n    throw new Error(\"Override renderTemplateSource\");\n};\n\nko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\n    throw new Error(\"Override createJavaScriptEvaluatorBlock\");\n};\n\nko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\n    // Named template\n    if (typeof template == \"string\") {\n        templateDocument = templateDocument || document;\n        var elem = templateDocument.getElementById(template);\n        if (!elem)\n            throw new Error(\"Cannot find template with ID \" + template);\n        return new ko.templateSources.domElement(elem);\n    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\n        // Anonymous template\n        return new ko.templateSources.anonymousTemplate(template);\n    } else\n        throw new Error(\"Unknown template type: \" + template);\n};\n\nko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\n    return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\n};\n\nko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\n    // Skip rewriting if requested\n    if (this['allowTemplateRewriting'] === false)\n        return true;\n    return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\n};\n\nko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\n    var rewritten = rewriterCallback(templateSource['text']());\n    templateSource['text'](rewritten);\n    templateSource['data'](\"isRewritten\", true);\n};\n\nko.exportSymbol('templateEngine', ko.templateEngine);\n\nko.templateRewriting = (function () {\n    var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\n    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\n\n    function validateDataBindValuesForRewriting(keyValueArray) {\n        var allValidators = ko.expressionRewriting.bindingRewriteValidators;\n        for (var i = 0; i < keyValueArray.length; i++) {\n            var key = keyValueArray[i]['key'];\n            if (allValidators.hasOwnProperty(key)) {\n                var validator = allValidators[key];\n\n                if (typeof validator === \"function\") {\n                    var possibleErrorMessage = validator(keyValueArray[i]['value']);\n                    if (possibleErrorMessage)\n                        throw new Error(possibleErrorMessage);\n                } else if (!validator) {\n                    throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\n                }\n            }\n        }\n    }\n\n    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\n        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\n        validateDataBindValuesForRewriting(dataBindKeyValueArray);\n        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\n\n        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\n        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\n        // extra indirection.\n        var applyBindingsToNextSiblingScript =\n            \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\n        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\n    }\n\n    return {\n        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\n            if (!templateEngine['isTemplateRewritten'](template, templateDocument))\n                templateEngine['rewriteTemplate'](template, function (htmlString) {\n                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\n                }, templateDocument);\n        },\n\n        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\n            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\n            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\n            });\n        },\n\n        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\n            return ko.memoization.memoize(function (domNode, bindingContext) {\n                var nodeToBind = domNode.nextSibling;\n                if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\n                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\n                }\n            });\n        }\n    }\n})();\n\n\n// Exported only because it has to be referenced by string lookup from within rewritten template\nko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\n(function() {\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\n    //\n    // Two are provided by default:\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\n    //                                           without reading/writing the actual element text content, since it will be overwritten\n    //                                           with the rendered template output.\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\n    // Template sources need to have the following functions:\n    //   text() \t\t\t- returns the template text from your storage location\n    //   text(value)\t\t- writes the supplied template text to your storage location\n    //   data(key)\t\t\t- reads values stored using data(key, value) - see below\n    //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\n    //\n    // Optionally, template sources can also have the following functions:\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\n    //   nodes(value)       - writes the given DOM element to your storage location\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\n    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\n    //\n    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\n\n    ko.templateSources = {};\n\n    // ---- ko.templateSources.domElement -----\n\n    // template types\n    var templateScript = 1,\n        templateTextArea = 2,\n        templateTemplate = 3,\n        templateElement = 4;\n\n    ko.templateSources.domElement = function(element) {\n        this.domElement = element;\n\n        if (element) {\n            var tagNameLower = ko.utils.tagNameLower(element);\n            this.templateType =\n                tagNameLower === \"script\" ? templateScript :\n                tagNameLower === \"textarea\" ? templateTextArea :\n                    // For browsers with proper <template> element support, where the .content property gives a document fragment\n                tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate :\n                templateElement;\n        }\n    }\n\n    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\n        var elemContentsProperty = this.templateType === templateScript ? \"text\"\n                                 : this.templateType === templateTextArea ? \"value\"\n                                 : \"innerHTML\";\n\n        if (arguments.length == 0) {\n            return this.domElement[elemContentsProperty];\n        } else {\n            var valueToWrite = arguments[0];\n            if (elemContentsProperty === \"innerHTML\")\n                ko.utils.setHtml(this.domElement, valueToWrite);\n            else\n                this.domElement[elemContentsProperty] = valueToWrite;\n        }\n    };\n\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\n    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\n        if (arguments.length === 1) {\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\n        } else {\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\n        }\n    };\n\n    var templatesDomDataKey = ko.utils.domData.nextKey();\n    function getTemplateDomData(element) {\n        return ko.utils.domData.get(element, templatesDomDataKey) || {};\n    }\n    function setTemplateDomData(element, data) {\n        ko.utils.domData.set(element, templatesDomDataKey, data);\n    }\n\n    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\n        var element = this.domElement;\n        if (arguments.length == 0) {\n            var templateData = getTemplateDomData(element),\n                containerData = templateData.containerData;\n            return containerData || (\n                this.templateType === templateTemplate ? element.content :\n                this.templateType === templateElement ? element :\n                undefined);\n        } else {\n            var valueToWrite = arguments[0];\n            setTemplateDomData(element, {containerData: valueToWrite});\n        }\n    };\n\n    // ---- ko.templateSources.anonymousTemplate -----\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\n\n    ko.templateSources.anonymousTemplate = function(element) {\n        this.domElement = element;\n    }\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\n    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\n        if (arguments.length == 0) {\n            var templateData = getTemplateDomData(this.domElement);\n            if (templateData.textData === undefined && templateData.containerData)\n                templateData.textData = templateData.containerData.innerHTML;\n            return templateData.textData;\n        } else {\n            var valueToWrite = arguments[0];\n            setTemplateDomData(this.domElement, {textData: valueToWrite});\n        }\n    };\n\n    ko.exportSymbol('templateSources', ko.templateSources);\n    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\n    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\n})();\n(function () {\n    var _templateEngine;\n    ko.setTemplateEngine = function (templateEngine) {\n        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\n            throw new Error(\"templateEngine must inherit from ko.templateEngine\");\n        _templateEngine = templateEngine;\n    }\n\n    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\n        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\n        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\n            nextInQueue = ko.virtualElements.nextSibling(node);\n            action(node, nextInQueue);\n        }\n    }\n\n    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\n        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\n        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\n        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\n        // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\n        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\n\n        if (continuousNodeArray.length) {\n            var firstNode = continuousNodeArray[0],\n                lastNode = continuousNodeArray[continuousNodeArray.length - 1],\n                parentNode = firstNode.parentNode,\n                provider = ko.bindingProvider['instance'],\n                preprocessNode = provider['preprocessNode'];\n\n            if (preprocessNode) {\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\n                    var nodePreviousSibling = node.previousSibling;\n                    var newNodes = preprocessNode.call(provider, node);\n                    if (newNodes) {\n                        if (node === firstNode)\n                            firstNode = newNodes[0] || nextNodeInRange;\n                        if (node === lastNode)\n                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\n                    }\n                });\n\n                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\n                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\n                // first node needs to be in the array).\n                continuousNodeArray.length = 0;\n                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\n                    return;\n                }\n                if (firstNode === lastNode) {\n                    continuousNodeArray.push(firstNode);\n                } else {\n                    continuousNodeArray.push(firstNode, lastNode);\n                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\n                }\n            }\n\n            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\n            // whereas a regular applyBindings won't introduce new memoized nodes\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\n                if (node.nodeType === 1 || node.nodeType === 8)\n                    ko.applyBindings(bindingContext, node);\n            });\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\n                if (node.nodeType === 1 || node.nodeType === 8)\n                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\n            });\n\n            // Make sure any changes done by applyBindings or unmemoize are reflected in the array\n            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\n        }\n    }\n\n    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\n        return nodeOrNodeArray.nodeType ? nodeOrNodeArray\n                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\n                                        : null;\n    }\n\n    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\n        options = options || {};\n        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n        var templateDocument = (firstTargetNode || template || {}).ownerDocument;\n        var templateEngineToUse = (options['templateEngine'] || _templateEngine);\n        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\n        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\n\n        // Loosely check result is an array of DOM nodes\n        if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\n            throw new Error(\"Template engine must return an array of DOM nodes\");\n\n        var haveAddedNodesToParent = false;\n        switch (renderMode) {\n            case \"replaceChildren\":\n                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\n                haveAddedNodesToParent = true;\n                break;\n            case \"replaceNode\":\n                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\n                haveAddedNodesToParent = true;\n                break;\n            case \"ignoreTargetNode\": break;\n            default:\n                throw new Error(\"Unknown renderMode: \" + renderMode);\n        }\n\n        if (haveAddedNodesToParent) {\n            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\n            if (options['afterRender'])\n                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);\n        }\n\n        return renderedNodesArray;\n    }\n\n    function resolveTemplateName(template, data, context) {\n        // The template can be specified as:\n        if (ko.isObservable(template)) {\n            // 1. An observable, with string value\n            return template();\n        } else if (typeof template === 'function') {\n            // 2. A function of (data, context) returning a string\n            return template(data, context);\n        } else {\n            // 3. A string\n            return template;\n        }\n    }\n\n    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\n        options = options || {};\n        if ((options['templateEngine'] || _templateEngine) == undefined)\n            throw new Error(\"Set a template engine before calling renderTemplate\");\n        renderMode = renderMode || \"replaceChildren\";\n\n        if (targetNodeOrNodeArray) {\n            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n\n            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\n            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\n\n            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\n                function () {\n                    // Ensure we've got a proper binding context to work with\n                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\n                        ? dataOrBindingContext\n                        : new ko.bindingContext(dataOrBindingContext, null, null, null, { \"exportDependencies\": true });\n\n                    var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\n                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\n\n                    if (renderMode == \"replaceNode\") {\n                        targetNodeOrNodeArray = renderedNodesArray;\n                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n                    }\n                },\n                null,\n                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\n            );\n        } else {\n            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\n            return ko.memoization.memoize(function (domNode) {\n                ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\n            });\n        }\n    };\n\n    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\n        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\n        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\n        var arrayItemContext;\n\n        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\n        var executeTemplateForArrayItem = function (arrayValue, index) {\n            // Support selecting template as a function of the data being rendered\n            arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function(context) {\n                context['$index'] = index;\n            });\n\n            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\n            return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\n        }\n\n        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\n        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\n            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\n            if (options['afterRender'])\n                options['afterRender'](addedNodesArray, arrayValue);\n\n            // release the \"cache\" variable, so that it can be collected by\n            // the GC when its value isn't used from within the bindings anymore.\n            arrayItemContext = null;\n        };\n\n        return ko.dependentObservable(function () {\n            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\n                unwrappedArray = [unwrappedArray];\n\n            // Filter out any entries marked as destroyed\n            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\n                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\n            });\n\n            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\n            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\n            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\n\n        }, null, { disposeWhenNodeIsRemoved: targetNode });\n    };\n\n    var templateComputedDomDataKey = ko.utils.domData.nextKey();\n    function disposeOldComputedAndStoreNewOne(element, newComputed) {\n        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\n        if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\n            oldComputed.dispose();\n        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);\n    }\n\n    ko.bindingHandlers['template'] = {\n        'init': function(element, valueAccessor) {\n            // Support anonymous templates\n            var bindingValue = ko.utils.unwrapObservable(valueAccessor());\n            if (typeof bindingValue == \"string\" || bindingValue['name']) {\n                // It's a named template - clear the element\n                ko.virtualElements.emptyNode(element);\n            } else if ('nodes' in bindingValue) {\n                // We've been given an array of DOM nodes. Save them as the template source.\n                // There is no known use case for the node array being an observable array (if the output\n                // varies, put that behavior *into* your template - that's what templates are for), and\n                // the implementation would be a mess, so assert that it's not observable.\n                var nodes = bindingValue['nodes'] || [];\n                if (ko.isObservable(nodes)) {\n                    throw new Error('The \"nodes\" option must be a plain, non-observable array.');\n                }\n                var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\n            } else {\n                // It's an anonymous template - store the element contents, then clear the element\n                var templateNodes = ko.virtualElements.childNodes(element),\n                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\n            }\n            return { 'controlsDescendantBindings': true };\n        },\n        'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n            var value = valueAccessor(),\n                options = ko.utils.unwrapObservable(value),\n                shouldDisplay = true,\n                templateComputed = null,\n                templateName;\n\n            if (typeof options == \"string\") {\n                templateName = value;\n                options = {};\n            } else {\n                templateName = options['name'];\n\n                // Support \"if\"/\"ifnot\" conditions\n                if ('if' in options)\n                    shouldDisplay = ko.utils.unwrapObservable(options['if']);\n                if (shouldDisplay && 'ifnot' in options)\n                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\n            }\n\n            if ('foreach' in options) {\n                // Render once for each data point (treating data set as empty if shouldDisplay==false)\n                var dataArray = (shouldDisplay && options['foreach']) || [];\n                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\n            } else if (!shouldDisplay) {\n                ko.virtualElements.emptyNode(element);\n            } else {\n                // Render once for this single data point (or use the viewModel if no data was provided)\n                var innerBindingContext = ('data' in options) ?\n                    bindingContext.createStaticChildContext(options['data'], options['as']) :  // Given an explitit 'data' value, we create a child binding context for it\n                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context\n                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\n            }\n\n            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\n            disposeOldComputedAndStoreNewOne(element, templateComputed);\n        }\n    };\n\n    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\n    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\n        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\n\n        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\n            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\n\n        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\n            return null; // Named templates can be rewritten, so return \"no error\"\n        return \"This template engine does not support anonymous templates nested within its templates\";\n    };\n\n    ko.virtualElements.allowedBindings['template'] = true;\n})();\n\nko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\nko.exportSymbol('renderTemplate', ko.renderTemplate);\n// Go through the items that have been added and deleted and try to find matches between them.\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\n    if (left.length && right.length) {\n        var failedCompares, l, r, leftItem, rightItem;\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\n            for (r = 0; rightItem = right[r]; ++r) {\n                if (leftItem['value'] === rightItem['value']) {\n                    leftItem['moved'] = rightItem['index'];\n                    rightItem['moved'] = leftItem['index'];\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\n                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\n                    break;\n                }\n            }\n            failedCompares += r;\n        }\n    }\n};\n\nko.utils.compareArrays = (function () {\n    var statusNotInOld = 'added', statusNotInNew = 'deleted';\n\n    // Simple calculation based on Levenshtein distance.\n    function compareArrays(oldArray, newArray, options) {\n        // For backward compatibility, if the third arg is actually a bool, interpret\n        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\n        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\n        oldArray = oldArray || [];\n        newArray = newArray || [];\n\n        if (oldArray.length < newArray.length)\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\n        else\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\n    }\n\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\n        var myMin = Math.min,\n            myMax = Math.max,\n            editDistanceMatrix = [],\n            smlIndex, smlIndexMax = smlArray.length,\n            bigIndex, bigIndexMax = bigArray.length,\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\n            maxDistance = smlIndexMax + bigIndexMax + 1,\n            thisRow, lastRow,\n            bigIndexMaxForRow, bigIndexMinForRow;\n\n        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\n            lastRow = thisRow;\n            editDistanceMatrix.push(thisRow = []);\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\n            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\n                if (!bigIndex)\n                    thisRow[bigIndex] = smlIndex + 1;\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\n                    thisRow[bigIndex] = bigIndex + 1;\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\n                else {\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\n                }\n            }\n        }\n\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\n            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\n                notInSml.push(editScript[editScript.length] = {     // added\n                    'status': statusNotInSml,\n                    'value': bigArray[--bigIndex],\n                    'index': bigIndex });\n            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\n                notInBig.push(editScript[editScript.length] = {     // deleted\n                    'status': statusNotInBig,\n                    'value': smlArray[--smlIndex],\n                    'index': smlIndex });\n            } else {\n                --bigIndex;\n                --smlIndex;\n                if (!options['sparse']) {\n                    editScript.push({\n                        'status': \"retained\",\n                        'value': bigArray[bigIndex] });\n                }\n            }\n        }\n\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\n        // smlIndexMax keeps the time complexity of this algorithm linear.\n        ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\n\n        return editScript.reverse();\n    }\n\n    return compareArrays;\n})();\n\nko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\n(function () {\n    // Objective:\n    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\n    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\n    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\n    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\n    //   previously mapped - retain those nodes, and just insert/delete other ones\n\n    // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\n    // You can use this, for example, to activate bindings on those nodes.\n\n    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\n        // Map this array value inside a dependentObservable so we re-map when any dependency changes\n        var mappedNodes = [];\n        var dependentObservable = ko.dependentObservable(function() {\n            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\n\n            // On subsequent evaluations, just replace the previously-inserted DOM nodes\n            if (mappedNodes.length > 0) {\n                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\n                if (callbackAfterAddingNodes)\n                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\n            }\n\n            // Replace the contents of the mappedNodes array, thereby updating the record\n            // of which nodes would be deleted if valueToMap was itself later removed\n            mappedNodes.length = 0;\n            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\n        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\n        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\n    }\n\n    var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),\n        deletedItemDummyValue = ko.utils.domData.nextKey();\n\n    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\n        // Compare the provided array against the previous one\n        array = array || [];\n        options = options || {};\n        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\n        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\n        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });\n        var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);\n\n        // Build the new mapping result\n        var newMappingResult = [];\n        var lastMappingResultIndex = 0;\n        var newMappingResultIndex = 0;\n\n        var nodesToDelete = [];\n        var itemsToProcess = [];\n        var itemsForBeforeRemoveCallbacks = [];\n        var itemsForMoveCallbacks = [];\n        var itemsForAfterAddCallbacks = [];\n        var mapData;\n\n        function itemMovedOrRetained(editScriptIndex, oldPosition) {\n            mapData = lastMappingResult[oldPosition];\n            if (newMappingResultIndex !== oldPosition)\n                itemsForMoveCallbacks[editScriptIndex] = mapData;\n            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\n            mapData.indexObservable(newMappingResultIndex++);\n            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\n            newMappingResult.push(mapData);\n            itemsToProcess.push(mapData);\n        }\n\n        function callCallback(callback, items) {\n            if (callback) {\n                for (var i = 0, n = items.length; i < n; i++) {\n                    if (items[i]) {\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\n                            callback(node, i, items[i].arrayEntry);\n                        });\n                    }\n                }\n            }\n        }\n\n        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\n            movedIndex = editScriptItem['moved'];\n            switch (editScriptItem['status']) {\n                case \"deleted\":\n                    if (movedIndex === undefined) {\n                        mapData = lastMappingResult[lastMappingResultIndex];\n\n                        // Stop tracking changes to the mapping for these nodes\n                        if (mapData.dependentObservable) {\n                            mapData.dependentObservable.dispose();\n                            mapData.dependentObservable = undefined;\n                        }\n\n                        // Queue these nodes for later removal\n                        if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {\n                            if (options['beforeRemove']) {\n                                newMappingResult.push(mapData);\n                                itemsToProcess.push(mapData);\n                                if (mapData.arrayEntry === deletedItemDummyValue) {\n                                    mapData = null;\n                                } else {\n                                    itemsForBeforeRemoveCallbacks[i] = mapData;\n                                }\n                            }\n                            if (mapData) {\n                                nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);\n                            }\n                        }\n                    }\n                    lastMappingResultIndex++;\n                    break;\n\n                case \"retained\":\n                    itemMovedOrRetained(i, lastMappingResultIndex++);\n                    break;\n\n                case \"added\":\n                    if (movedIndex !== undefined) {\n                        itemMovedOrRetained(i, movedIndex);\n                    } else {\n                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };\n                        newMappingResult.push(mapData);\n                        itemsToProcess.push(mapData);\n                        if (!isFirstExecution)\n                            itemsForAfterAddCallbacks[i] = mapData;\n                    }\n                    break;\n            }\n        }\n\n        // Store a copy of the array items we just considered so we can difference it next time\n        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\n\n        // Call beforeMove first before any changes have been made to the DOM\n        callCallback(options['beforeMove'], itemsForMoveCallbacks);\n\n        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\n        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\n\n        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\n        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\n            // Get nodes for newly added items\n            if (!mapData.mappedNodes)\n                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\n\n            // Put nodes in the right place if they aren't there already\n            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\n                if (node !== nextNode)\n                    ko.virtualElements.insertAfter(domNode, node, lastNode);\n            }\n\n            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\n            if (!mapData.initialized && callbackAfterAddingNodes) {\n                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\n                mapData.initialized = true;\n            }\n        }\n\n        // If there's a beforeRemove callback, call it after reordering.\n        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\n        // some sort of animation, which is why we first reorder the nodes that will be removed. If the\n        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\n        // Perhaps we'll make that change in the future if this scenario becomes more common.\n        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\n\n        // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item\n        // as already \"removed\" so we won't call beforeRemove for it again, and it ensures that the item won't match up\n        // with an actual item in the array and appear as \"retained\" or \"moved\".\n        for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {\n            if (itemsForBeforeRemoveCallbacks[i]) {\n                itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;\n            }\n        }\n\n        // Finally call afterMove and afterAdd callbacks\n        callCallback(options['afterMove'], itemsForMoveCallbacks);\n        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\n    }\n})();\n\nko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\nko.nativeTemplateEngine = function () {\n    this['allowTemplateRewriting'] = false;\n}\n\nko.nativeTemplateEngine.prototype = new ko.templateEngine();\nko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\nko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\n    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\n        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\n        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\n\n    if (templateNodes) {\n        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\n    } else {\n        var templateText = templateSource['text']();\n        return ko.utils.parseHtmlFragment(templateText, templateDocument);\n    }\n};\n\nko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\nko.setTemplateEngine(ko.nativeTemplateEngine.instance);\n\nko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\n(function() {\n    ko.jqueryTmplTemplateEngine = function () {\n        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\n        // doesn't expose a version number, so we have to infer it.\n        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\n        // which KO internally refers to as version \"2\", so older versions are no longer detected.\n        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\n            if (!jQueryInstance || !(jQueryInstance['tmpl']))\n                return 0;\n            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\n            try {\n                if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\n                    // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\n                    return 2; // Final version of jquery.tmpl\n                }\n            } catch(ex) { /* Apparently not the version we were looking for */ }\n\n            return 1; // Any older version that we don't support\n        })();\n\n        function ensureHasReferencedJQueryTemplates() {\n            if (jQueryTmplVersion < 2)\n                throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\n        }\n\n        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\n            return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\n        }\n\n        this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\n            templateDocument = templateDocument || document;\n            options = options || {};\n            ensureHasReferencedJQueryTemplates();\n\n            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\n            var precompiled = templateSource['data']('precompiled');\n            if (!precompiled) {\n                var templateText = templateSource['text']() || \"\";\n                // Wrap in \"with($whatever.koBindingContext) { ... }\"\n                templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\n\n                precompiled = jQueryInstance['template'](null, templateText);\n                templateSource['data']('precompiled', precompiled);\n            }\n\n            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\n            var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\n\n            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\n            resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\n\n            jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\n            return resultNodes;\n        };\n\n        this['createJavaScriptEvaluatorBlock'] = function(script) {\n            return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\n        };\n\n        this['addTemplate'] = function(templateName, templateMarkup) {\n            document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\n        };\n\n        if (jQueryTmplVersion > 0) {\n            jQueryInstance['tmpl']['tag']['ko_code'] = {\n                open: \"__.push($1 || '');\"\n            };\n            jQueryInstance['tmpl']['tag']['ko_with'] = {\n                open: \"with($1) {\",\n                close: \"} \"\n            };\n        }\n    };\n\n    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\n    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\n\n    // Use this one by default *only if jquery.tmpl is referenced*\n    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\n    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\n        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\n\n    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\n})();\n}));\n}());\n})();\n","import idb from 'idb';\r\nimport PropTypes from 'prop-types';\r\nimport knockout from 'knockout';\r\n\r\n\r\n\r\nconsole.log('idb', idb);\r\nconsole.log('PropTypes', PropTypes);\r\nconsole.log('knockout', knockout);\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function(e){\r\n  // console.log('admit one');\r\n\r\n  let DB;\r\n  let mvc;\r\n\r\n  window.lod_mvc = function() { console.log(mvc); }\r\n\r\n  idb.open('sample_db', 1, upgradeDB => {\r\n    upgradeDB.createObjectStore('sample_store', { keyPath: 'id' });\r\n  })\r\n  .then(db => {\r\n    DB = db;\r\n    init();\r\n  })\r\n\r\n  let CRUD = {};\r\n\r\n  CRUD.create = function create(data_obj) {\r\n    const tx = DB.transaction('sample_store', 'readwrite');\r\n    tx.objectStore('sample_store').put(data_obj);\r\n    return tx.complete;\r\n  }\r\n\r\n  CRUD.read = function read(key) {\r\n    return key ?\r\n    DB.transaction('sample_store').objectStore('sample_store').get(key) :\r\n    DB.transaction('sample_store').objectStore('sample_store').getAll();\r\n  }\r\n\r\n  CRUD.update = function update(data_obj) {\r\n    const tx = DB.transaction('sample_store', 'readwrite');\r\n    tx.objectStore('sample_store').put(data_obj);\r\n    return tx.complete;\r\n  }\r\n\r\n  CRUD.destroy = function destroy(key) {\r\n    const tx = DB.transaction('sample_store', 'readwrite');\r\n    tx.objectStore('sample_store').delete(key);\r\n    return tx.complete;\r\n  }\r\n\r\n  //\r\n\r\n  function MVC(list) {\r\n    let self = this;\r\n    let edit = null;\r\n\r\n    self.app_name = knockout.observable(\"IDB Sample\");\r\n    self.list = knockout.observableArray(list);\r\n    self.new_value_input = knockout.observable(\"\");\r\n    self.editing = knockout.observable(false);\r\n    self.submit_new_value = function() {\r\n      let value = self.new_value_input();\r\n      if(!value) { return; }\r\n      if(edit) {\r\n        let obj = Object.assign({}, edit, { value, updated: Date() });\r\n        CRUD.update(obj).then(resp => {\r\n          self.list.replace(edit, obj);\r\n          self.cancel_editing();\r\n        });\r\n      }\r\n      else {\r\n        let obj = { value, id: Date.now(), created: Date(), updated: null };\r\n        CRUD.create(obj).then(resp => {\r\n          self.list.push(obj);\r\n          self.cancel_editing();\r\n        });\r\n      }\r\n    }\r\n    self.edit_value = function(val) {\r\n      edit = val;\r\n      self.new_value_input(val.value);\r\n      self.editing(true);\r\n    }\r\n    self.delete_value = function(val) {\r\n      CRUD.destroy(val.id).then(resp => {\r\n        self.list.remove(val);\r\n      });\r\n    }\r\n    self.cancel_editing = function() {\r\n      self.new_value_input('');\r\n      self.editing(false);\r\n      edit = null;\r\n    }\r\n  }\r\n\r\n  function init() {\r\n    CRUD.read().then(arr => {\r\n      console.log('data', arr);\r\n      mvc = new MVC(arr);\r\n      knockout.applyBindings(mvc);\r\n    });\r\n  }\r\n\r\n});\r\n"]}